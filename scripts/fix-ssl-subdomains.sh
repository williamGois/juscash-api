#!/bin/bash

echo "=== CORRE√á√ÉO DE SSL PARA SUBDOM√çNIOS ==="
echo "Script para regenerar certificados SSL dos subdom√≠nios"
echo

# Verificar se est√° rodando como root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Este script deve ser executado como root (sudo)"
    exit 1
fi

# Parar nginx temporariamente
echo "üîÑ Parando nginx..."
systemctl stop nginx

# Backup dos certificados existentes
echo "üì¶ Fazendo backup dos certificados existentes..."
mkdir -p /etc/letsencrypt/backup-$(date +%Y%m%d)
cp -r /etc/letsencrypt/live /etc/letsencrypt/backup-$(date +%Y%m%d)/ 2>/dev/null || true

# Lista de subdom√≠nios
SUBDOMAINS=("portainer.juscash.app" "flower.juscash.app" "cadvisor.juscash.app" "cron.juscash.app")

# Gerar certificados para cada subdom√≠nio
for subdomain in "${SUBDOMAINS[@]}"; do
    echo
    echo "üîê Gerando certificado SSL para $subdomain..."
    
    # Remover certificado antigo se existir
    certbot delete --cert-name $subdomain --non-interactive 2>/dev/null || true
    
    # Gerar novo certificado
    certbot certonly \
        --standalone \
        --non-interactive \
        --agree-tos \
        --email admin@juscash.app \
        -d $subdomain \
        --force-renewal
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Certificado gerado com sucesso para $subdomain"
    else
        echo "‚ùå Erro ao gerar certificado para $subdomain"
    fi
done

# Gerar certificado wildcard (opcional, mais seguro)
echo
echo "üîê Tentando gerar certificado wildcard para *.juscash.app..."
certbot certonly \
    --manual \
    --preferred-challenges dns \
    --non-interactive \
    --agree-tos \
    --email admin@juscash.app \
    -d "*.juscash.app" \
    -d "juscash.app" \
    --manual-auth-hook /dev/null \
    --manual-cleanup-hook /dev/null 2>/dev/null || echo "‚ö†Ô∏è  Certificado wildcard n√£o p√¥de ser gerado automaticamente"

# Verificar certificados gerados
echo
echo "üìã Verificando certificados gerados:"
for subdomain in "${SUBDOMAINS[@]}"; do
    if [ -f "/etc/letsencrypt/live/$subdomain/fullchain.pem" ]; then
        echo "‚úÖ $subdomain: Certificado OK"
        # Verificar validade
        expiry=$(openssl x509 -enddate -noout -in /etc/letsencrypt/live/$subdomain/fullchain.pem | cut -d= -f2)
        echo "   Expira em: $expiry"
    else
        echo "‚ùå $subdomain: Certificado AUSENTE"
    fi
done

# Testar configura√ß√£o nginx
echo
echo "üîß Testando configura√ß√£o nginx..."
nginx -t

if [ $? -eq 0 ]; then
    echo "‚úÖ Configura√ß√£o nginx OK"
    echo "üöÄ Iniciando nginx..."
    systemctl start nginx
    systemctl reload nginx
else
    echo "‚ùå Erro na configura√ß√£o nginx"
    echo "üîÑ Tentando iniciar nginx mesmo assim..."
    systemctl start nginx
fi

# Verificar status dos servi√ßos
echo
echo "üìä Status dos servi√ßos:"
systemctl is-active nginx && echo "‚úÖ Nginx: Ativo" || echo "‚ùå Nginx: Inativo"

# Testar conectividade SSL
echo
echo "üîç Testando conectividade SSL dos subdom√≠nios:"
for subdomain in "${SUBDOMAINS[@]}"; do
    echo -n "Testing $subdomain: "
    timeout 10 openssl s_client -connect $subdomain:443 -servername $subdomain </dev/null 2>/dev/null | grep -q "Verify return code: 0" && echo "‚úÖ SSL OK" || echo "‚ùå SSL ERRO"
done

# Instru√ß√µes finais
echo
echo "=== INSTRU√á√ïES FINAIS ==="
echo "1. Verifique se os subdom√≠nios est√£o acess√≠veis:"
echo "   - https://portainer.juscash.app"
echo "   - https://flower.juscash.app" 
echo "   - https://cadvisor.juscash.app"
echo
echo "2. Se ainda houver erros, verifique:"
echo "   - DNS dos subdom√≠nios apontando para o IP correto"
echo "   - Firewall liberando portas 80 e 443"
echo "   - Logs: tail -f /var/log/nginx/*.log"
echo
echo "3. Para renova√ß√£o autom√°tica:"
echo "   systemctl enable certbot.timer"
echo "   systemctl start certbot.timer"
echo
echo "‚úÖ Script de corre√ß√£o SSL conclu√≠do!"