#!/bin/bash

echo "============================================================"
echo "üîç AN√ÅLISE COMPLETA DO WEB SCRAPING - JUSCASH"
echo "============================================================"

SSH_CMD="sshpass -p 'Syberya1989@@' ssh -o StrictHostKeyChecking=no root@77.37.68.178"
API_BASE="https://cron.juscash.app/api"

echo ""
echo "üìã Testando Conectividade da API"
echo "----------------------------------------"
if curl -s -f "${API_BASE}/simple/ping" > /dev/null; then
    echo "‚úÖ API est√° respondendo"
else
    echo "‚ùå API n√£o est√° respondendo"
fi

echo ""
echo "üìã Status dos Containers Docker"
echo "----------------------------------------"
$SSH_CMD "cd /var/www/juscash && docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"

echo ""
echo "üìã Verificando Depend√™ncias do Selenium"
echo "----------------------------------------"
echo "üîç Testando Selenium:"
if $SSH_CMD "cd /var/www/juscash && docker exec juscash_worker_prod python -c 'from selenium import webdriver; print(\"Selenium OK\")'" 2>/dev/null; then
    echo "‚úÖ Selenium est√° funcionando"
else
    echo "‚ùå Erro no Selenium"
fi

echo ""
echo "üîç Verificando Chrome/Chromium:"
CHROME_FOUND=false

for cmd in "google-chrome --version" "chromium-browser --version" "chromium --version"; do
    if $SSH_CMD "cd /var/www/juscash && docker exec juscash_worker_prod $cmd" 2>/dev/null; then
        echo "‚úÖ Chrome/Chromium encontrado: $cmd"
        CHROME_FOUND=true
        break
    fi
done

if [ "$CHROME_FOUND" = false ]; then
    echo "üö® PROBLEMA CR√çTICO: Chrome/Chromium n√£o encontrado no container!"
    echo "üí° Solu√ß√£o: Usar Dockerfile.alternative que inclui Chrome"
fi

echo ""
echo "üìã Testando Conectividade com DJE"
echo "----------------------------------------"
if $SSH_CMD "cd /var/www/juscash && docker exec juscash_worker_prod curl -I -s -m 10 https://dje.tjsp.jus.br/cdje/index.do" | grep -q "200 OK"; then
    echo "‚úÖ Site do DJE est√° acess√≠vel"
else
    echo "‚ùå Problema ao acessar o site do DJE"
fi

echo ""
echo "üìã An√°lise do Banco de Dados"
echo "----------------------------------------"
DB_RESPONSE=$(curl -s "${API_BASE}/publicacoes/?limit=5")
if echo "$DB_RESPONSE" | grep -q '"id":'; then
    if echo "$DB_RESPONSE" | grep -q '"status":"error"'; then
        echo "‚ùå Erro no banco de dados"
    else
        echo "‚úÖ Banco de dados est√° respondendo"
        echo "üìä Amostra dos dados:"
        echo "$DB_RESPONSE" | head -3
    fi
else
    echo "‚ùå Problema com o banco de dados"
fi

echo ""
echo "üìã Logs Recentes do Worker"
echo "----------------------------------------"
echo "üìã √öltimos logs do worker (filtrados):"
$SSH_CMD "cd /var/www/juscash && docker logs juscash_worker_prod --tail 20 | grep -E '(scraping|extract|publicacao|selenium|chrome|DJE|SUCCESS|FAILURE|ERROR|extract_publicacoes)'"

echo ""
echo "üìã Teste de Execu√ß√£o do Scraping"
echo "----------------------------------------"
ONTEM=$(date -d "yesterday" +%Y-%m-%d 2>/dev/null || date -v -1d +%Y-%m-%d)
echo "üöÄ Iniciando teste de scraping para $ONTEM..."

RESPONSE=$(curl -s -X POST "${API_BASE}/scraping/extract" \
    -H 'Content-Type: application/json' \
    -d "{\"data_inicio\": \"${ONTEM}T00:00:00\", \"data_fim\": \"${ONTEM}T23:59:59\"}")

if echo "$RESPONSE" | grep -q "task_id"; then
    TASK_ID=$(echo "$RESPONSE" | grep -o '"task_id":"[^"]*"' | cut -d'"' -f4)
    echo "‚úÖ Tarefa iniciada: $TASK_ID"
    
    echo "‚è≥ Aguardando 30 segundos..."
    sleep 30
    
    STATUS_RESPONSE=$(curl -s "${API_BASE}/cron/tasks/${TASK_ID}")
    if echo "$STATUS_RESPONSE" | grep -q "SUCCESS"; then
        echo "üéâ Sucesso! Scraping funcionou"
    elif echo "$STATUS_RESPONSE" | grep -q "FAILURE"; then
        echo "‚ùå Falha na execu√ß√£o do scraping"
    elif echo "$STATUS_RESPONSE" | grep -q "PENDING\|PROGRESS"; then
        echo "‚è≥ Ainda em execu√ß√£o"
    else
        echo "‚ùì Estado desconhecido"
        echo "Resposta: $STATUS_RESPONSE"
    fi
else
    echo "‚ùå Erro ao iniciar scraping"
    echo "Resposta: $RESPONSE"
fi

echo ""
echo "============================================================"
echo "üìä RESUMO EXECUTIVO"
echo "============================================================"

echo ""
echo "üéØ PARA VERIFICAR RAPIDAMENTE SE O SCRAPING EST√Å FUNCIONANDO:"
echo ""
echo "1. üå∏ Flower: https://flower.juscash.app (admin:juscash2024)"
echo "   - Verificar tarefas 'extract_' com status SUCCESS"
echo ""
echo "2. üìã Logs: docker logs juscash_worker_prod --tail 20 | grep extract"
echo ""
echo "3. üß™ Teste manual:"
echo "   curl -X POST 'https://cron.juscash.app/api/scraping/extract' \\"
echo "     -H 'Content-Type: application/json' \\"
echo "     -d '{\"data_inicio\": \"2024-12-25T00:00:00\", \"data_fim\": \"2024-12-25T23:59:59\"}'"
echo ""
echo "4. üìä Dados: curl 'https://cron.juscash.app/api/publicacoes/?limit=5'"
echo ""

echo "‚úÖ INDICADORES DE SA√öDE:"
echo "- Tarefas SUCCESS no Flower nas √∫ltimas 24h"
echo "- Logs sem erros cr√≠ticos"
echo "- Publica√ß√µes novas sendo salvas"
echo "- Tempo de execu√ß√£o < 30 minutos por dia"
echo ""

echo "üö® ALERTAS CR√çTICOS:"
echo "- 0 publica√ß√µes extra√≠das por > 2 dias"
echo "- Erros de Chrome/Selenium constantes"
echo "- Timeout em > 50% das execu√ß√µes"
echo "- Campos vazios em > 80% dos dados"
echo ""

if [ "$CHROME_FOUND" = false ]; then
    echo "üîß A√á√ÉO NECESS√ÅRIA:"
    echo "Chrome n√£o est√° instalado no container. Para corrigir:"
    echo "1. Editar docker-compose.prod.yml"
    echo "2. Alterar 'dockerfile: Dockerfile' para 'dockerfile: Dockerfile.alternative'"
    echo "3. Fazer rebuild: docker-compose -f docker-compose.prod.yml up --build -d"
fi

echo ""
echo "üìö DOCUMENTA√á√ÉO COMPLETA:"
echo "- SCRAPING_MONITORING.md: Guia detalhado de monitoramento"
echo "- MONITORING.md: Guia geral de monitoramento"
echo ""
echo "An√°lise conclu√≠da em $(date)" 