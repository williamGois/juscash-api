name: 🧪 Staging Deploy - JusCash API

on:
  push:
    branches: [ develop, staging ]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Motivo do deploy manual'
        required: false
        default: 'Deploy manual para testes'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Testes Rápidos
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: 🧪 Testes rápidos (unitários apenas)
      env:
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/test_extract_publicacoes_use_case.py -v
        pytest tests/test_publicacao_repository.py -v

  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    
    environment:
      name: staging
      url: https://staging.cron.juscash.app

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📋 Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: 🧪 Deploy to staging
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        DEPLOY_REASON: ${{ github.event.inputs.deploy_reason || 'Auto deploy from staging branch' }}
      run: |
        ssh $VPS_USER@$VPS_HOST << 'EOF'
          set -e
          
          echo "🧪 Iniciando deploy para STAGING..."
          echo "📝 Motivo: ${{ env.DEPLOY_REASON }}"
          
          # Criar diretório staging se não existir
          mkdir -p /var/www/juscash-staging
          cd /var/www/juscash-staging
          
          # Clone ou pull do código
          if [ ! -d .git ]; then
            echo "📥 Clonando repositório..."
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo "📥 Atualizando código..."
            git fetch --all
            git reset --hard origin/${{ github.ref_name }}
          fi
          
          # Configurar para staging (porta diferente)
          if [ ! -f docker-compose.staging.yml ]; then
            echo "📝 Criando configuração de staging..."
            cp docker-compose.prod.yml docker-compose.staging.yml
            
            # Trocar portas para evitar conflito com produção
            sed -i 's/5000:5000/5001:5000/g' docker-compose.staging.yml
            sed -i 's/5555:5555/5556:5555/g' docker-compose.staging.yml
          fi
          
          # Build e start
          echo "🏗️ Building staging..."
          docker-compose -f docker-compose.staging.yml build
          docker-compose -f docker-compose.staging.yml up -d
          
          # Health check
          echo "🏥 Verificando staging..."
          sleep 20
          
          if curl -f http://localhost:5001/api/cron/health; then
            echo "✅ Staging deploy realizado com sucesso!"
            echo "🌐 Disponível em: http://${{ secrets.VPS_HOST }}:5001"
          else
            echo "❌ Staging deploy falhou!"
            exit 1
          fi
        EOF

    - name: 📱 Notify staging status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Staging deploy sucesso: http://${{ secrets.VPS_HOST }}:5001"
        else
          echo "❌ Staging deploy falhou!"
        fi

  notify-staging:
    name: 📢 Notificar Staging
    runs-on: ubuntu-latest
    needs: [test, deploy-staging]
    if: always()
    
    steps:
    - name: 📱 Discord Notification - Staging
      if: always()
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🧪 **Staging Deploy - JusCash API**
          
          **Status**: ${{ needs.deploy-staging.result == 'success' && '✅ Sucesso' || '❌ Falha' }}
          **Branch**: `${{ github.ref_name }}`
          **Commit**: `${{ github.sha }}`
          **URL**: http://${{ secrets.VPS_HOST }}:5001
          
          **Motivo**: ${{ github.event.inputs.deploy_reason || 'Auto deploy' }}
          **Testes**: ${{ needs.test.result == 'success' && '✅' || '❌' }} 