name: Deploy to VPS

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: juscash-api
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short || true

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy na VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script_stop: true
        timeout: 30m
        script: |
          set -e
          
          LOG_DIR="/var/www/juscash/logs"
          mkdir -p "$LOG_DIR"
          LOG_FILE="$LOG_DIR/deploy_$(date +%Y%m%d_%H%M%S).log"
          
          log() {
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
          }
          
          log "=== INICIANDO DEPLOY ==="
          log "Commit: ${{ github.sha }}"
          
          cd /var/www/juscash
          log "✓ Etapa 1/18: Diretório atual: $(pwd)"
          
          if [ -f .env ]; then
              cp .env .env.backup_$(date +%Y%m%d_%H%M%S)
              log "✓ Etapa 2/18: Backup do .env criado"
          else
              log "✓ Etapa 2/18: Arquivo .env não existe, pulando backup"
          fi
          
          git stash --include-untracked || true
          log "✓ Etapa 3/18: Mudanças locais salvas com stash"
          
          git fetch origin
          git reset --hard origin/master
          log "✓ Etapa 4/18: Código atualizado do repositório"
          
          docker-compose -f docker-compose.prod.yml stop web || true
          docker-compose -f docker-compose.prod.yml rm -f web || true
          log "✓ Etapa 5/18: Container web parado"
          
          docker rmi juscash-api-web:latest 2>/dev/null || true
          docker rmi juscash_web:prod 2>/dev/null || true
          OLD_IMAGES=$(docker images -q --filter "reference=juscash-api-web" 2>/dev/null)
          if [ ! -z "$OLD_IMAGES" ]; then
              docker rmi $OLD_IMAGES 2>/dev/null || true
          fi
          log "✓ Etapa 6/18: Imagem antiga do web removida"
          
          echo "${{ github.sha }}" > VERSION
          log "✓ Etapa 7/18: Arquivo VERSION criado com hash: ${{ github.sha }}"
          
          if [ ! -f .env ]; then
              log "✓ Etapa 8/18: Criando arquivo .env de produção"
              SECRET_KEY=$(python3 -c "import secrets; print(secrets.token_urlsafe(64))")
              POSTGRES_PASSWORD=$(python3 -c "import secrets; print(secrets.token_urlsafe(32))")
              
              echo "PRODUCTION=true" > .env
              echo "FLASK_ENV=production" >> .env
              echo "SECRET_KEY=${SECRET_KEY}" >> .env
              echo "POSTGRES_DB=juscash_db" >> .env
              echo "POSTGRES_USER=juscash" >> .env
              echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
              echo "DATABASE_URL=postgresql://juscash:${POSTGRES_PASSWORD}@db:5432/juscash_db" >> .env
              echo "REDIS_URL=redis://redis:6379/0" >> .env
              echo "DJE_BASE_URL=https://dje.tjsp.jus.br/cdje" >> .env
              echo "SCRAPING_ENABLED=true" >> .env
              echo "DAILY_SCRAPING_SCHEDULE=3600" >> .env
              echo "WEEKLY_SCRAPING_SCHEDULE=604800" >> .env
              echo "CLEANUP_SCHEDULE=86400" >> .env
              echo "DB_POOL_SIZE=10" >> .env
              echo "DB_POOL_RECYCLE=300" >> .env
              echo "FLOWER_USER=admin" >> .env
              echo "FLOWER_PASSWORD=juscash2024" >> .env
              
              log "✓ Arquivo .env criado com senhas seguras"
          else
              log "✓ Etapa 8/18: Arquivo .env já existe"
          fi
          
          docker-compose -f docker-compose.prod.yml up -d db redis
          log "✓ Etapa 9/18: Banco de dados e Redis iniciados"
          
          log "Aguardando banco de dados ficar pronto..."
          for i in {1..30}; do
              if docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U juscash > /dev/null 2>&1; then
                  log "✓ Etapa 10/18: Banco de dados está pronto"
                  break
              fi
              if [ $i -eq 30 ]; then
                  log "✗ ERRO: Banco de dados não ficou pronto após 30 tentativas"
                  docker-compose -f docker-compose.prod.yml logs db | tail -20 >> "$LOG_FILE"
                  exit 1
              fi
              sleep 2
          done
          
          log "Configurando banco de dados..."
          docker-compose -f docker-compose.prod.yml exec -T db psql -U juscash -d postgres -c "CREATE DATABASE juscash_db;" 2>/dev/null || true
          log "✓ Etapa 11/18: Banco de dados criado ou já existente"
          
          docker-compose -f docker-compose.prod.yml build --no-cache web
          log "✓ Etapa 12/18: Nova imagem web construída"
          
          docker-compose -f docker-compose.prod.yml up -d web
          log "✓ Etapa 13/18: Container web iniciado"
          
          log "Aguardando aplicação iniciar..."
          sleep 30
          
          if docker-compose -f docker-compose.prod.yml ps | grep -q "juscash_web_prod.*Up"; then
              log "✓ Etapa 14/18: Container web está rodando"
          else
              log "✗ ERRO: Container web não está rodando"
              docker-compose -f docker-compose.prod.yml logs web | tail -50 >> "$LOG_FILE"
              exit 1
          fi
          
          log "Verificando criação de tabelas..."
          log "✓ Etapa 15/18: Tabelas serão criadas automaticamente pelo run.py"
          
          docker-compose -f docker-compose.prod.yml up -d worker
          log "✓ Etapa 16/18: Worker Celery iniciado"
          
          docker-compose -f docker-compose.prod.yml up -d flower
          log "✓ Etapa 17/18: Flower iniciado"
          
          log "Testando endpoint da API..."
          RESPONSE=$(curl -s http://localhost:5000/api/simple/ping || echo "ERRO")
          log "✓ Etapa 18/18: Resposta da API: $RESPONSE"
          
          log "=== DEPLOY CONCLUÍDO COM SUCESSO ==="
          log "Versão deployada: ${{ github.sha }}"
          
          echo "=== LOGS DO CONTAINER WEB ==="
          docker-compose -f docker-compose.prod.yml logs --tail=20 web
          
          echo "=== STATUS DOS CONTAINERS ==="
          docker-compose -f docker-compose.prod.yml ps 