name: 🚀 CI/CD - Deploy JusCash API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Cache dependências Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: 🔍 Lint com flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Executar testes
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        flask db upgrade
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

  deploy:
    name: 🚀 Deploy para VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://cron.juscash.app

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📋 Adicionar servidor aos hosts conhecidos
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy com Tag de Imagem
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🚀 Deploy DRÁSTICO com tag de imagem: ${IMAGE_TAG:0:7}"
        
        ssh $VPS_USER@$VPS_HOST << EOF
          set -e
          
          echo "🔄 Deploy DRÁSTICO iniciado: \$(date)"
          echo "📋 Tag da imagem: ${IMAGE_TAG:0:7}"
          
          cd /var/www/juscash
          
          # 1. Backup rápido
          echo "💾 Backup..."
          docker-compose exec -T db pg_dump -U juscash juscash_db > backup_\$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo "⚠️ Backup falhou"
          
          # 2. PARAR TUDO COMPLETAMENTE
          echo "🛑 PARANDO TUDO COMPLETAMENTE..."
          docker-compose down --remove-orphans --volumes || true
          docker stop \$(docker ps -aq) 2>/dev/null || true
          docker rm \$(docker ps -aq) 2>/dev/null || true
          
          # 3. REMOVER TODAS AS IMAGENS RELACIONADAS
          echo "🗑️ REMOVENDO TODAS AS IMAGENS..."
          docker rmi \$(docker images -q --filter "reference=juscash*") 2>/dev/null || true
          docker rmi \$(docker images -q --filter "dangling=true") 2>/dev/null || true
          docker system prune -af --volumes || true
          
          # 4. Atualizar código
          echo "📥 Atualizando código..."
          git fetch origin
          git reset --hard origin/master
          git clean -fd
          
          # 5. Criar arquivo VERSION com hash do commit
          echo "${IMAGE_TAG:0:7}" > VERSION
          echo "✅ Versão criada: \$(cat VERSION)"
          echo "📋 Verificando se arquivo existe: \$(ls -la VERSION)"
          
          # 6. MODIFICAR O CÓDIGO DIRETAMENTE PARA FORÇAR ATUALIZAÇÃO
          echo "🔧 Modificando código para forçar atualização..."
          sed -i "s/return 'unknown'/return '\$(cat VERSION)'/g" app/presentation/routes.py || true
          sed -i "s/return 'error_reading_version'/return '\$(cat VERSION)'/g" app/presentation/routes.py || true
          
          # 6.5. GARANTIR QUE O ARQUIVO VERSION SEJA COPIADO PARA O CONTAINER
          echo "📋 Adicionando VERSION ao Dockerfile temporariamente..."
          echo "COPY VERSION /app/VERSION" >> Dockerfile
          echo "ENV DEPLOY_VERSION=${IMAGE_TAG:0:7}" >> Dockerfile
          
          # 7. Build COMPLETAMENTE DO ZERO
          echo "🔨 Build COMPLETO do zero..."
          docker-compose build --no-cache --pull --force-rm
          
          # 8. Iniciar containers
          echo "🚀 Iniciando containers..."
          docker-compose up -d
          
          # 9. Aguardar inicialização LONGA
          echo "⏳ Aguardando 60 segundos para inicialização completa..."
          sleep 60
          
          # 10. VERIFICAR SE O ARQUIVO VERSION ESTÁ NO CONTAINER
          echo "🔍 Verificando se arquivo VERSION está no container..."
          docker-compose exec -T web ls -la /app/VERSION || echo "❌ Arquivo VERSION não encontrado no container"
          docker-compose exec -T web cat /app/VERSION || echo "❌ Não foi possível ler arquivo VERSION no container"
          docker-compose exec -T web env | grep DEPLOY_VERSION || echo "❌ Variável DEPLOY_VERSION não encontrada"
          
          # 11. Teste da API com timeout muito maior
          echo "🏥 Testando API com timeout estendido..."
          SUCCESS=false
          for i in {1..20}; do
            echo "🔍 Tentativa \$i/20..."
            if curl -f -s --max-time 20 http://localhost:5000/api/simple/ping > /tmp/health.json; then
              API_VERSION=\$(cat /tmp/health.json | python3 -c "import json,sys; print(json.load(sys.stdin).get('version', 'unknown'))" 2>/dev/null || echo "unknown")
              echo "✅ API respondendo! Versão: \$API_VERSION"
              echo "📋 Resposta completa:"
              cat /tmp/health.json | python3 -m json.tool 2>/dev/null || cat /tmp/health.json
              
              # Verificar se a versão foi atualizada
              if [ "\$API_VERSION" = "${IMAGE_TAG:0:7}" ]; then
                echo "🎉 VERSÃO ATUALIZADA CORRETAMENTE!"
                SUCCESS=true
                break
              else
                echo "⚠️ Versão ainda não atualizada (esperado: ${IMAGE_TAG:0:7}, atual: \$API_VERSION)"
                echo "🔍 Verificando arquivo VERSION no container:"
                docker-compose exec -T web cat VERSION || echo "❌ Arquivo VERSION não encontrado no container"
              fi
              break
            else
              echo "❌ API não está respondendo - tentativa \$i/20"
              if [ \$i -eq 5 ] || [ \$i -eq 10 ] || [ \$i -eq 15 ]; then
                echo "📋 Logs recentes do container web:"
                docker-compose logs web --tail=15
                echo "📊 Status dos containers:"
                docker-compose ps
              fi
              sleep 5
            fi
          done
          
          # 12. Executar migrações
          echo "🗄️ Aplicando migrações..."
          docker-compose exec -T web flask db upgrade || echo "⚠️ Erro nas migrações"
          
          # 13. Reverter modificações no código
          echo "🔄 Revertendo modificações temporárias..."
          git checkout -- app/presentation/routes.py
          
          if [ "\$SUCCESS" = true ]; then
            echo "✅ DEPLOY DRÁSTICO CONCLUÍDO COM SUCESSO!"
          else
            echo "❌ Deploy executado, mas versão pode não ter atualizado"
            echo "🔍 Informações de debug:"
            echo "   - Arquivo VERSION: \$(cat VERSION 2>/dev/null || echo 'não encontrado')"
            echo "   - Status containers: \$(docker-compose ps --services --filter 'status=running')"
            echo "   - Imagens criadas: \$(docker images | grep juscash | head -3)"
          fi
          
          echo "🌐 Acesse: https://cron.juscash.app/api/simple/ping"
        EOF

    - name: 🔔 Verificação Externa Final
      run: |
        echo "🌐 Aguardando propagação externa..."
        sleep 20
        
        echo "📡 Verificando versão externa..."
        EXPECTED_VERSION="${{ github.sha }}"
        EXPECTED_SHORT="${EXPECTED_VERSION:0:7}"
        
        for i in {1..8}; do
          if curl -f -s --max-time 15 https://cron.juscash.app/api/simple/ping > /tmp/api_response.json 2>/dev/null; then
            echo "✅ API externa acessível!"
            echo "📋 Resposta:"
            cat /tmp/api_response.json
            
            # Extrair versão usando jq se disponível, senão usar python
            if command -v jq >/dev/null 2>&1; then
              VERSION=$(jq -r '.version // "unknown"' /tmp/api_response.json)
            else
              VERSION=$(python3 -c 'import json,sys; print(json.load(open("/tmp/api_response.json")).get("version", "unknown"))' 2>/dev/null || echo "unknown")
            fi
            
            echo "🔖 Versão externa: $VERSION"
            echo "🔖 Versão esperada: $EXPECTED_SHORT"
            
            if [ "$VERSION" = "$EXPECTED_SHORT" ]; then
              echo "🎉 Versão atualizada corretamente!"
            else
              echo "⚠️ Versão ainda não atualizada"
            fi
            
            break
          else
            echo "⚠️ Tentativa $i/8 falhou, aguardando..."
            sleep 10
          fi
        done

    - name: ❌ Notificar se falhou
      if: failure()
      run: |
        echo "❌ Deploy falhou!"
        echo "📋 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "🔍 Verifique os logs acima para mais detalhes" 