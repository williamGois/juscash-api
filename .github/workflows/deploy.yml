name: üöÄ CI/CD - Deploy JusCash API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Workflow simplificado - Deploy direto na VPS sem registry

jobs:
  test:
    name: üß™ Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üêç Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Cache depend√™ncias
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: üìã Instalar depend√™ncias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: üîç Lint com flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: üß™ Executar testes
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: üìä Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  deploy:
    name: üöÄ Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://cron.juscash.app

    steps:
    - name: üì• Checkout c√≥digo
      uses: actions/checkout@v4

    - name: üîê Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: üìã Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to server
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
      run: |
        ssh $VPS_USER@$VPS_HOST << 'EOF'
          set -e
          
          echo "üîÑ Iniciando deploy autom√°tico..."
          
          # Navegar para diret√≥rio do projeto
          cd /var/www/juscash
          
          # Backup da vers√£o atual
          echo "üíæ Fazendo backup..."
          docker-compose exec -T db pg_dump -U juscash juscash_db > backup_$(date +%Y%m%d_%H%M%S).sql || echo "‚ö†Ô∏è Backup falhou"
          
          # Pull das mudan√ßas
          echo "üì• Atualizando c√≥digo..."
          git fetch origin
          git reset --hard origin/master
          
          # Parar containers
          echo "‚èπÔ∏è Parando containers..."
          docker-compose down
          
          # Rebuild aplica√ß√£o
          echo "üèóÔ∏è Rebuilding aplica√ß√£o..."
          docker-compose build --no-cache web
          
          # Iniciar containers
          echo "üöÄ Iniciando containers..."
          docker-compose up -d
          
          # Aguardar servi√ßos
          echo "‚è≥ Aguardando servi√ßos..."
          sleep 30
          
          # Executar migra√ß√µes se necess√°rio
          echo "üóÑÔ∏è Aplicando migra√ß√µes..."
          docker-compose exec -T web flask db upgrade || echo "‚ö†Ô∏è Migra√ß√µes falharam"
          
          # Health check
          echo "üè• Verificando sa√∫de da aplica√ß√£o..."
          sleep 15
          
          if curl -f http://localhost:5000/api/simple/ping; then
            echo "‚úÖ Deploy realizado com sucesso!"
            
            # Mostrar status
            echo "üìä Status dos containers:"
            docker-compose ps
            
            # Limpar imagens antigas
            docker image prune -f
            
            # Manter apenas 5 backups mais recentes
            ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs -r rm
            
          else
            echo "‚ùå Deploy falhou! Verificando logs..."
            docker-compose logs web | tail -20
            exit 1
          fi
        EOF

    - name: üì± Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deploy realizado com sucesso para https://cron.juscash.app"
        else
          echo "‚ùå Deploy falhou!"
        fi

# Notifica√ß√µes removidas - Discord n√£o ser√° usado 