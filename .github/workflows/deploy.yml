name: 🚀 CI/CD - Deploy JusCash API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Cache dependências Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    - name: 🔍 Lint com flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Executar testes
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        flask db upgrade
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

  deploy:
    name: 🚀 Deploy para VPS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://cron.juscash.app

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📋 Adicionar servidor aos hosts conhecidos
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy Simplificado para VPS
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        DEPLOY_BRANCH: ${{ github.ref_name }}
        COMMIT_SHA: ${{ github.sha }}
        SHORT_SHA: ${{ github.sha }}
      run: |
        echo "🚀 Iniciando deploy simplificado..."
        echo "📋 Branch: $DEPLOY_BRANCH"
        echo "🔖 Commit: ${SHORT_SHA:0:7}"
        
        ssh $VPS_USER@$VPS_HOST << 'EOF'
          set -e
          
          echo "🔄 Deploy iniciado em $(date)"
          cd /var/www/juscash
          
          # 1. Backup rápido
          echo "💾 Backup rápido..."
          docker-compose exec -T db pg_dump -U juscash juscash_db > backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || echo "⚠️ Backup falhou"
          
          # 2. Atualizar código (FORÇADO)
          echo "📥 Atualizando código..."
          git fetch origin
          git reset --hard origin/${{ env.DEPLOY_BRANCH }}
          
          # 3. Criar arquivo VERSION
          COMMIT_SHORT="${{ env.SHORT_SHA }}"
          echo "${COMMIT_SHORT:0:7}" > VERSION
          echo "✅ Versão: $(cat VERSION)"
          
          # 4. ESTRATÉGIA SIMPLES: Parar tudo e rebuildar
          echo "⏹️ Parando todos os containers..."
          docker-compose down --remove-orphans || true
          
          # 5. Limpar imagens antigas
          echo "🧹 Limpando imagens antigas..."
          docker image prune -f || true
          
          # 6. Build forçado sem cache
          echo "🔨 Build forçado sem cache..."
          docker-compose build --no-cache --pull
          
          # 7. Iniciar containers
          echo "🚀 Iniciando containers..."
          docker-compose up -d
          
          # 8. Aguardar inicialização
          echo "⏳ Aguardando 30 segundos..."
          sleep 30
          
          # 9. Verificar status
          echo "📊 Status dos containers:"
          docker-compose ps
          
          # 10. Teste rápido da API
          echo "🏥 Testando API..."
          for i in {1..10}; do
            if curl -f -s http://localhost:5000/api/simple/ping > /tmp/health.json; then
              API_VERSION=$(cat /tmp/health.json | python3 -c "import sys, json; print(json.load(sys.stdin).get('version', 'unknown'))" 2>/dev/null || echo "unknown")
              echo "✅ API respondendo! Versão: $API_VERSION"
              
              # Mostrar resposta completa
              echo "📋 Resposta da API:"
              cat /tmp/health.json
              break
            else
              echo "⚠️ Tentativa $i/10 falhou, aguardando..."
              sleep 5
            fi
          done
          
          # 11. Executar migrações
          echo "🗄️ Aplicando migrações..."
          docker-compose exec -T web flask db upgrade || echo "⚠️ Erro nas migrações"
          
          echo "✅ Deploy concluído!"
          echo "🌐 Acesse: https://cron.juscash.app/api/simple/ping"
        EOF

    - name: 🔔 Verificação Externa
      run: |
        echo "🌐 Aguardando propagação..."
        sleep 15
        
        echo "📡 Testando acesso externo..."
        for i in {1..5}; do
          if curl -f -s --max-time 10 https://cron.juscash.app/api/simple/ping; then
            echo "✅ API acessível externamente!"
            break
          else
            echo "⚠️ Tentativa $i/5, aguardando..."
            sleep 10
          fi
        done

    - name: ❌ Notificar se falhou
      if: failure()
      run: |
        echo "❌ Deploy falhou!"
        echo "📋 Commit: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}" 