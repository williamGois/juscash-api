name: 🚀 CI/CD - Deploy JusCash API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Cache dependências
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: 🔍 Lint com flake8
      run: |
        pip install flake8
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Executar testes
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        FLASK_ENV: testing
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=term

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: 🏗️ Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🏗️ Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy to VPS
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: https://cron.juscash.app

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 📋 Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: 🚀 Deploy to server
      env:
        VPS_HOST: ${{ secrets.VPS_HOST }}
        VPS_USER: ${{ secrets.VPS_USER }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
      run: |
        ssh $VPS_USER@$VPS_HOST << 'EOF'
          set -e
          
          echo "🔄 Iniciando deploy automático..."
          
          # Navegar para diretório do projeto
          cd /var/www/juscash
          
          # Backup da versão atual
          echo "💾 Fazendo backup..."
          docker-compose exec -T db pg_dump -U juscash juscash_db > backup_$(date +%Y%m%d_%H%M%S).sql
          
          # Pull das mudanças
          echo "📥 Atualizando código..."
          git pull origin main || git pull origin master
          
          # Login no registry
          echo "🔐 Autenticando no registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull da nova imagem
          echo "📦 Baixando nova imagem..."
          docker-compose pull
          
          # Rebuild e restart
          echo "🏗️ Rebuilding aplicação..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Aguardar serviços
          echo "⏳ Aguardando serviços..."
          sleep 30
          
          # Executar migrações se necessário
          echo "🗄️ Aplicando migrações..."
          docker-compose exec -T web python create-tables.py
          
          # Health check
          echo "🏥 Verificando saúde da aplicação..."
          sleep 15
          
          if curl -f http://localhost:5000/api/cron/health; then
            echo "✅ Deploy realizado com sucesso!"
            
            # Limpar imagens antigas
            docker image prune -f
            
            # Manter apenas 5 backups mais recentes
            ls -t backup_*.sql | tail -n +6 | xargs -r rm
            
          else
            echo "❌ Deploy falhou! Fazendo rollback..."
            docker-compose down
            docker-compose up -d
            exit 1
          fi
        EOF

    - name: 📱 Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deploy realizado com sucesso para https://cron.juscash.app"
        else
          echo "❌ Deploy falhou!"
        fi

  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: 📱 Discord Notification
      if: always()
      uses: Ilshidur/action-discord@master
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      with:
        args: |
          🚀 **Deploy JusCash API**
          
          **Status**: ${{ needs.deploy.result == 'success' && '✅ Sucesso' || '❌ Falha' }}
          **Commit**: `${{ github.sha }}`
          **Branch**: `${{ github.ref_name }}`
          **URL**: https://cron.juscash.app
          
          **Testes**: ${{ needs.test.result == 'success' && '✅' || '❌' }}
          **Build**: ${{ needs.build.result == 'success' && '✅' || '❌' }}
          **Deploy**: ${{ needs.deploy.result == 'success' && '✅' || '❌' }} 