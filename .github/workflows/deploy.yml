name: Deploy to VPS

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: juscash-api
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short || true

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        timeout: 20m
        command_timeout: 20m
        script: |
          cd /var/www/juscash
          
          # 1. Backup do banco (opcional)
          # docker-compose exec -T db pg_dump -U juscash juscash_db > /tmp/backup_$(date +%Y%m%d_%H%M%S).sql 2>/dev/null || true
          
          # 2. Limpar conflitos Git
          git stash --include-untracked
          git clean -fd
          
          # 3. Atualizar código
          git fetch origin
          git reset --hard origin/${{ github.ref_name }}
          
          # 4. Parar apenas o container web (preservar banco)
          docker-compose stop web
          docker-compose rm -f web
          
          # 5. Build otimizado (sem --no-cache para ser mais rápido)
          docker-compose build web
          
          # 6. Iniciar containers
          docker-compose up -d
          
          # 7. Aguardar inicialização
          echo "⏳ Aguardando containers iniciarem..."
          sleep 15
          
          # 8. Aplicar migrações
          docker-compose exec -T web flask db upgrade || true
          
          # 9. Verificar se está rodando
          for i in {1..10}; do
            if curl -f -s http://localhost:5000/api/simple/ping; then
              echo "✅ API respondendo!"
              exit 0
            fi
            echo "Tentativa $i/10..."
            sleep 3
          done
          
          echo "❌ API não respondeu após 10 tentativas"
          docker-compose logs --tail=50
          exit 1 