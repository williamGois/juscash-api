#!/bin/bash

# Script de inicializa√ß√£o para o container da API JusCash

set -e

echo "üöÄ Iniciando JusCash API..."

# Verificar se estamos em produ√ß√£o
if [ "$ENVIRONMENT" = "production" ]; then
    echo "üì¶ Ambiente: PRODU√á√ÉO"
else
    echo "üì¶ Ambiente: DESENVOLVIMENTO"
fi

# Inicializar Xvfb para Selenium (se n√£o estiver rodando)
echo "üñ•Ô∏è Configurando display virtual para Selenium..."
if ! pgrep -x "Xvfb" > /dev/null; then
    echo "üñ•Ô∏è Iniciando Xvfb..."
    Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
    sleep 2
    echo "‚úÖ Xvfb iniciado com sucesso"
else
    echo "‚úÖ Xvfb j√° est√° rodando"
fi

# Fun√ß√£o para manter Xvfb rodando em produ√ß√£o
if [ "$ENVIRONMENT" = "production" ]; then
    echo "üîÑ Configurando monitoramento do Xvfb..."
    (
        while true; do
            sleep 30
            if ! pgrep -x "Xvfb" > /dev/null; then
                echo "‚ö†Ô∏è Xvfb parou, reiniciando..."
                Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
                sleep 2
                echo "‚úÖ Xvfb reiniciado"
            fi
        done
    ) &
    echo "‚úÖ Monitor do Xvfb iniciado"
fi

# Verificar ChromeDriver
echo "üîç Verificando ChromeDriver..."
if command -v chromedriver >/dev/null 2>&1; then
    echo "‚úÖ ChromeDriver encontrado: $(chromedriver --version 2>/dev/null | head -1 || echo 'Vers√£o n√£o dispon√≠vel')"
else
    echo "‚ùå ChromeDriver n√£o encontrado"
fi

# Verificar Google Chrome
if command -v google-chrome >/dev/null 2>&1; then
    echo "‚úÖ Google Chrome encontrado: $(google-chrome --version 2>/dev/null || echo 'Vers√£o n√£o dispon√≠vel')"
elif command -v chromium >/dev/null 2>&1; then
    echo "‚úÖ Chromium encontrado: $(chromium --version 2>/dev/null || echo 'Vers√£o n√£o dispon√≠vel')"
else
    echo "‚ùå Chrome/Chromium n√£o encontrado"
fi

# Aguardar banco de dados se especificado
if [ -n "$DATABASE_URL" ]; then
    echo "‚è≥ Aguardando banco de dados..."
    ./wait-for-it.sh ${DB_HOST:-localhost}:${DB_PORT:-5432} --timeout=30 --strict -- echo "‚úÖ Banco de dados dispon√≠vel"
fi

# Executar migra√ß√µes se necess√°rio
if [ "$RUN_MIGRATIONS" = "true" ]; then
    echo "üîÑ Executando migra√ß√µes do banco de dados..."
    python -c "
from app import create_app
from app.infrastructure.database.models import db
app = create_app()
with app.app_context():
    try:
        db.create_all()
        print('‚úÖ Tabelas criadas/atualizadas com sucesso')
    except Exception as e:
        print(f'‚ö†Ô∏è Erro nas migra√ß√µes: {e}')
"
fi

# Configurar vari√°veis de ambiente para Selenium
export DISPLAY=:99
export CHROME_BIN=/usr/bin/google-chrome
export CHROMEDRIVER_PATH=/usr/bin/chromedriver

echo "üåü Iniciando aplica√ß√£o..."

# Executar o comando passado
exec "$@" 