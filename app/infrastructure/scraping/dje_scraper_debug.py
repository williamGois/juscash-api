import re
import time
import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import requests
import tempfile
import uuid
import threading
import subprocess
import pdfplumber

class DJEScraperDebug:
    """
    Vers√£o de debug do DJEScraper que permite visualizar o Chrome em execu√ß√£o
    e implementa o padr√£o Singleton para garantir uma √∫nica inst√¢ncia.
    """
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(DJEScraperDebug, cls).__new__(cls)
        return cls._instance

    def __init__(self, base_url: str = "https://dje.tjsp.jus.br/cdje/index.do", visual_mode: bool = False):
        if not hasattr(self, 'initialized'):
            with self._lock:
                if not hasattr(self, 'initialized'):
                    self.base_url = base_url
                    self.session = requests.Session()
                    self.driver = None
                    self.wait = None
                    self.max_retries = 3
                    self.visual_mode = visual_mode
                    logging.basicConfig(level=logging.INFO)
                    # N√ÉO inicializar o driver aqui
                    self.initialized = True

    def get_driver(self):
        """Obt√©m o driver, inicializando-o se necess√°rio."""
        with self._lock:
            if self.driver is None:
                self._initialize_driver()
            
            # Verificar se o driver est√° vivo
            try:
                # Uma opera√ß√£o simples como pegar a URL atual pode verificar a conex√£o
                _ = self.driver.current_url
            except Exception as e:
                print(f"‚ö†Ô∏è Driver n√£o responsivo ({e}), tentando reiniciar...")
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
                self._initialize_driver()

            return self.driver

    def _get_chrome_options(self):
        """Configura√ß√µes do Chrome - com op√ß√£o visual para debug"""
        chrome_options = Options()
        
        # Configurar display virtual se dispon√≠vel
        if 'DISPLAY' not in os.environ:
            os.environ['DISPLAY'] = ':99'
        
        # Criar diret√≥rio de dados √∫nico para esta sess√£o
        user_data_dir = f"/tmp/chrome_data_{uuid.uuid4().hex[:8]}"
        chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
        
        # MODO VISUAL: Comentar --headless para ver o Chrome
        if not self.visual_mode:
            chrome_options.add_argument("--headless")
        else:
            print("üñ•Ô∏è MODO VISUAL ATIVADO - Chrome ser√° vis√≠vel!")
            # Para modo visual, usar configura√ß√µes mais simples
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--start-maximized")
            chrome_options.add_argument("--display=:99")
            return chrome_options
        
        # Configura√ß√µes essenciais para container
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_argument("--disable-background-timer-throttling")
        chrome_options.add_argument("--disable-backgrounding-occluded-windows")
        chrome_options.add_argument("--disable-renderer-backgrounding")
        chrome_options.add_argument("--disable-features=TranslateUI")
        chrome_options.add_argument("--disable-ipc-flooding-protection")
        chrome_options.add_argument("--memory-pressure-off")
        chrome_options.add_argument("--max_old_space_size=4096")
        chrome_options.add_argument("--single-process")
        chrome_options.add_argument("--no-zygote")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-popup-blocking")
        chrome_options.add_argument("--aggressive-cache-discard")
        chrome_options.add_argument("--disable-background-networking")
        chrome_options.add_argument("--display=:99")
        chrome_options.add_argument("--remote-debugging-port=0")  # Porta aleat√≥ria
        chrome_options.add_argument("--disable-crash-reporter")
        chrome_options.add_argument("--disable-logging")
        chrome_options.add_argument("--disable-in-process-stack-traces")
        chrome_options.add_argument("--disable-background-mode")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-sync")
        
        # NOVO: Configura√ß√µes para melhor estabilidade
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--disable-infobars")
        chrome_options.add_argument("--disable-notifications")
        chrome_options.add_argument("--disable-save-password-bubble")
        chrome_options.add_argument("--disable-translate")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor,VizHitTestSurfaceLayer")
        chrome_options.add_argument("--force-device-scale-factor=1")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--ignore-ssl-errors")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-component-update")
        chrome_options.add_argument("--disable-domain-reliability")
        chrome_options.add_argument("--disable-features=TranslateUI,BlinkGenPropertyTrees")
        chrome_options.add_argument("--disable-hang-monitor")
        chrome_options.add_argument("--disable-prompt-on-repost")
        chrome_options.add_argument("--disable-web-resources")
        chrome_options.add_argument("--enable-automation")
        chrome_options.add_argument("--hide-scrollbars")
        chrome_options.add_argument("--mute-audio")
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--no-default-browser-check")
        chrome_options.add_argument("--password-store=basic")
        chrome_options.add_argument("--use-mock-keychain")
        
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging', 'enable-automation'])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_experimental_option('detach', False)  # N√£o destacar
        
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        return chrome_options

    def _initialize_driver(self):
        """Inicializa o driver com configura√ß√µes de debug"""
        chrome_options = self._get_chrome_options()
        
        # Verificar prerequisitos
        print("üîç Verificando prerequisitos...")
        
        # Verificar display virtual
        if 'DISPLAY' not in os.environ:
            os.environ['DISPLAY'] = ':99'
            print("üñ•Ô∏è Display configurado para :99")
        else:
            print(f"üñ•Ô∏è Display j√° configurado: {os.environ['DISPLAY']}")
        
        # Verificar se Xvfb est√° rodando
        try:
            result = subprocess.run(['pgrep', '-f', 'Xvfb'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ Xvfb est√° rodando (PID: {result.stdout.strip()})")
            else:
                print("‚ö†Ô∏è Xvfb n√£o est√° rodando, tentando iniciar...")
                subprocess.run(['Xvfb', ':99', '-screen', '0', '1920x1080x24'], check=False)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar Xvfb: {e}")
        
        for attempt in range(self.max_retries):
            try:
                print(f"üöÄ Tentativa {attempt + 1}/{self.max_retries} de inicializar Chrome driver...")
                
                if self.visual_mode:
                    print(f"üéØ Modo: VISUAL (Chrome ser√° vis√≠vel no display {os.environ.get('DISPLAY', 'padr√£o')})")
                else:
                    print(f"üéØ Modo: HEADLESS (Chrome oculto)")
                
                # Verificar se ChromeDriver existe
                chromedriver_paths = ['/usr/local/bin/chromedriver', '/usr/bin/chromedriver']
                chromedriver_path = None
                
                for path in chromedriver_paths:
                    try:
                        result = subprocess.run([path, '--version'], capture_output=True, text=True, timeout=5)
                        if result.returncode == 0:
                            chromedriver_path = path
                            print(f"‚úÖ ChromeDriver encontrado em {path}: {result.stdout.strip()}")
                            break
                    except Exception as e:
                        print(f"‚ö†Ô∏è ChromeDriver n√£o encontrado em {path}: {e}")
                
                if not chromedriver_path:
                    print("‚ùå ChromeDriver n√£o encontrado em nenhum local padr√£o")
                    # Tentar instalar via webdriver-manager
                    print("üîÑ Tentando instalar ChromeDriver via webdriver-manager...")
                
                # Estrat√©gia 1: Usar chromedriver encontrado
                if chromedriver_path:
                    try:
                        print(f"üîß Tentando com ChromeDriver em {chromedriver_path}")
                        self.driver = webdriver.Chrome(
                            service=Service(chromedriver_path),
                            options=chrome_options
                        )
                        print("‚úÖ Driver inicializado com ChromeDriver local")
                        break
                    except Exception as e:
                        print(f"‚ùå ChromeDriver local falhou: {e}")
                        
                # Estrat√©gia 2: Fallback para webdriver-manager
                try:
                    print("üîß Tentando com webdriver-manager...")
                    service = Service(ChromeDriverManager().install())
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    print("‚úÖ Driver inicializado com webdriver-manager")
                    break
                except Exception as e:
                    print(f"‚ùå Webdriver-manager falhou: {e}")
                    
                # Estrat√©gia 3: Chrome sem service espec√≠fico
                try:
                    print("üîß Tentando Chrome sem service espec√≠fico...")
                    self.driver = webdriver.Chrome(options=chrome_options)
                    print("‚úÖ Driver inicializado com Chrome padr√£o")
                    break
                except Exception as e:
                    print(f"‚ùå Chrome padr√£o falhou: {e}")
                    
                    # Log detalhado do erro
                    print(f"‚ùå Erro detalhado: {str(e)}")
                    if "chrome not reachable" in str(e).lower():
                        print("üí° Sugest√£o: Problema com display virtual ou Chrome n√£o instalado")
                    elif "chromedriver" in str(e).lower():
                        print("üí° Sugest√£o: Problema com ChromeDriver - vers√£o incompat√≠vel")
                    elif "permission" in str(e).lower():
                        print("üí° Sugest√£o: Problema de permiss√µes")
            
            except Exception as e:
                print(f"‚ùå Erro cr√≠tico na tentativa {attempt + 1}: {e}")
                if self.driver:
                    try:
                        self.driver.quit()
                    except: 
                        pass
                    self.driver = None
                
                if attempt == self.max_retries - 1:
                    print("‚ùå ERRO CR√çTICO: Todas as tentativas falharam")
                    print("üîç Dicas de debug:")
                    print("  - Verificar se o Xvfb est√° rodando: ps aux | grep Xvfb")
                    print("  - Verificar se o Chrome est√° instalado: google-chrome --version")
                    print("  - Verificar se o ChromeDriver est√° instalado: chromedriver --version")
                    print("  - Verificar permiss√µes dos arquivos")
                    raise Exception(f"Falha cr√≠tica ao inicializar Chrome ap√≥s {self.max_retries} tentativas. √öltimo erro: {e}")
                
                time.sleep(3)
        
        if self.driver:
            try:
                self.driver.set_page_load_timeout(45)
                self.driver.implicitly_wait(15)
                self.wait = WebDriverWait(self.driver, 30)
                self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
                
                # Testar se o driver est√° funcionando
                self.driver.get("data:text/html,<html><body><h1>Chrome Test</h1></body></html>")
                print(f"‚úÖ Chrome inicializado com sucesso! URL de teste: {self.driver.current_url}")
                
                if self.visual_mode:
                    print(f"üåê Chrome vis√≠vel no display {os.environ.get('DISPLAY')}")
                    
            except Exception as e:
                print(f"‚ùå Erro no teste p√≥s-inicializa√ß√£o: {e}")
                raise

    def extrair_publicacoes_debug(self, data_inicio: datetime, data_fim: datetime, pause_between_steps: bool = True) -> List[Dict[str, Any]]:
        """Vers√£o debug com navega√ß√£o completa em cada resultado e pagina√ß√£o"""
        driver = self.get_driver()
        if not driver:
            logging.error("‚ùå Driver n√£o est√° operacional. Abortando extra√ß√£o.")
            return []

        print(f"üï∑Ô∏è Iniciando extra√ß√£o COMPLETA de {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
        
        try:
            # Etapa 1: Acessar o site
            print("üìç Etapa 1: Acessando o site do DJE...")
            driver.get(self.base_url)
            
            # Aguardar carregamento completo
            print("  ‚è≥ Aguardando carregamento completo da p√°gina...")
            self._wait_for_page_load()
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para continuar para o preenchimento do formul√°rio...")

            # Etapa 2: Preencher per√≠odo de datas (OPCIONAL - comentar para teste)
            print("üìç Etapa 2: Preenchendo per√≠odo de datas...")
            
            # TESTE: Comentar esta se√ß√£o para fazer busca sem filtro de data
            # try:
            #     # Aguardar campo data in√≠cio
            #     print("  üìÖ Preenchendo data de in√≠cio...")
            #     data_inicio_field = self._wait_for_element_ready(By.ID, "dataInicio")
            #     data_inicio_str = data_inicio.strftime("%d%m%Y")
            #     self._safe_send_keys(data_inicio_field, data_inicio_str)
            #
            #     # Aguardar campo data fim
            #     print("  üìÖ Preenchendo data de fim...")
            #     data_fim_field = self._wait_for_element_ready(By.ID, "dataFim")
            #     data_fim_str = data_fim.strftime("%d%m%Y")
            #     self._safe_send_keys(data_fim_field, data_fim_str)
            #
            #     print(f"  ‚úÖ Per√≠odo configurado: {data_inicio_str} a {data_fim_str}")
            # except Exception as e:
            #     print(f"  ‚ö†Ô∏è Erro ao configurar datas: {e}")
            
            # TESTE TEMPOR√ÅRIO: Pular configura√ß√£o de data para ver se encontra resultados gerais
            print("  üöß TESTE: Pulando configura√ß√£o de data para busca geral...")
            time.sleep(2)

            # Etapa 3: Preencher formul√°rio
            print("üìç Etapa 3: Preenchendo formul√°rio de pesquisa...")
            
            # Aguardar campo data in√≠cio estar dispon√≠vel e interag√≠vel
            print("  üìÖ Aguardando campo de data in√≠cio...")
            try:
                data_inicio_field = self._wait_for_element_ready(By.ID, "dataInicio")
                data_inicio_str = data_inicio.strftime("%d%m%Y")
                self._safe_send_keys(data_inicio_field, data_inicio_str)
                print(f"  ‚úÖ Data in√≠cio preenchida: {data_inicio_str}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Erro ao preencher data in√≠cio: {e}")

            # Aguardar campo data fim estar dispon√≠vel e interag√≠vel  
            print("  üìÖ Aguardando campo de data fim...")
            try:
                data_fim_field = self._wait_for_element_ready(By.ID, "dataFim")
                data_fim_str = data_fim.strftime("%d%m%Y")
                self._safe_send_keys(data_fim_field, data_fim_str)
                print(f"  ‚úÖ Data fim preenchida: {data_fim_str}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è Erro ao preencher data fim: {e}")

            # Aguardar select caderno estar dispon√≠vel
            print("  üìÇ Aguardando select caderno...")
            select_caderno_element = self._wait_for_element_ready(By.NAME, "dadosConsulta.cdCaderno")
            
            # Usar JavaScript para selecionar o valor do select
            try:
                select_caderno = Select(select_caderno_element)
                select_caderno.select_by_value("-11")
                print("  ‚úÖ Caderno selecionado via Selenium")
            except:
                print("  ‚ö†Ô∏è Selenium falhou, usando JavaScript para select")
                driver.execute_script("""
                    var select = arguments[0];
                    select.value = '-11';
                    select.dispatchEvent(new Event('change', {bubbles: true}));
                """, select_caderno_element)
                print("  ‚úÖ Caderno selecionado via JavaScript")

            # Aguardar campo de busca estar dispon√≠vel
            print("  üîç Aguardando campo de busca...")
            search_box = self._wait_for_element_ready(By.ID, "procura")
            self._safe_send_keys(search_box, '"RPV" e "pagamento pelo INSS"')
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para submeter o formul√°rio...")
            
            # Etapa 4: Submeter formul√°rio
            print("üìç Etapa 4: Submetendo formul√°rio...")
            
            # Aguardar bot√£o submit estar dispon√≠vel
            print("  üîò Aguardando bot√£o submit...")
            submit_button = self._wait_for_element_ready(By.CSS_SELECTOR, "form[name='consultaAvancadaForm'] input[type='submit']")
            self._safe_click(submit_button)

            print("‚è≥ Aguardando resultados...")
            time.sleep(8)
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para processar os resultados...")

            # Etapa 5: Processar TODAS as p√°ginas de resultados
            print("üìç Etapa 5: Processando TODAS as p√°ginas de resultados...")
            all_publicacoes = []
            page_num = 1
            
            while True:
                print(f"  üìÑ Processando p√°gina {page_num}...")
                
                try:
                    # Aguardar div de resultados
                    print(f"    ‚è≥ Aguardando div de resultados da p√°gina {page_num}...")
                    self.wait.until(EC.presence_of_element_located((By.ID, "divResultadosInferior")))
                    time.sleep(3)
                    
                    # Verificar se h√° erro na p√°gina
                    page_source = driver.page_source.lower()
                    if "erro" in page_source or "error" in page_source:
                        print(f"    ‚ö†Ô∏è Poss√≠vel erro detectado na p√°gina {page_num}")
                    
                    soup = BeautifulSoup(driver.page_source, 'html.parser')
                    
                    # DEBUG: Verificar conte√∫do da p√°gina
                    print(f"    üîç URL atual: {driver.current_url}")
                    print(f"    üîç T√≠tulo da p√°gina: {driver.title}")
                    
                    # Verificar se h√° div de resultados
                    div_resultados = soup.find('div', id='divResultadosInferior')
                    if div_resultados:
                        print(f"    üìã Div divResultadosInferior encontrado com {len(div_resultados.get_text())} caracteres")
                        
                        # Verificar se h√° texto "nenhum resultado"  
                        texto_resultados = div_resultados.get_text().lower()
                        if "nenhum" in texto_resultados or "n√£o foram encontrados" in texto_resultados or "sem resultados" in texto_resultados:
                            print(f"    ‚ÑπÔ∏è Mensagem de nenhum resultado detectada na p√°gina {page_num}")
                            if page_num == 1:
                                print("    ‚ÑπÔ∏è Nenhuma publica√ß√£o encontrada para os crit√©rios definidos.")
                                break
                        
                        # Verificar quantidade de resultados
                        total_text = driver.page_source
                        if "Resultados 1 a" in total_text:
                            import re
                            match = re.search(r'Resultados \d+ a \d+ de (\d+)', total_text)
                            if match:
                                total = int(match.group(1))
                                print(f"    üìä Total de resultados encontrados: {total}")
                    else:
                        print(f"    ‚ö†Ô∏è Div divResultadosInferior n√£o encontrado na p√°gina {page_num}")
                    
                    # Buscar por elementos de publica√ß√£o usando a estrutura correta
                    print(f"    üîç Procurando links com onclick que cont√©m consultaSimples.do...")
                    
                    # NOVA ABORDAGEM: Primeiro buscar TODOS os links onclick na p√°gina
                    all_onclick_links = driver.find_elements(By.XPATH, "//a[@onclick]")
                    print(f"    üìã Total de links com onclick na p√°gina: {len(all_onclick_links)}")
                    
                    # Filtrar apenas os que cont√©m consultaSimples.do
                    publicacao_elements = []
                    for link in all_onclick_links:
                        onclick_attr = link.get_attribute('onclick')
                        if onclick_attr and 'consultaSimples.do' in onclick_attr:
                            publicacao_elements.append(link)
                            print(f"      üîó Link encontrado: {onclick_attr[:100]}...")
                    
                    # Se ainda n√£o encontrou, tentar com seletor mais amplo
                    if not publicacao_elements:
                        # Buscar qualquer link que mencione consultaSimples
                        broader_links = driver.find_elements(By.XPATH, "//*[contains(@onclick, 'consultaSimples')]")
                        print(f"    üìã Busca mais ampla encontrou {len(broader_links)} elementos")
                        
                        for link in broader_links:
                            onclick_attr = link.get_attribute('onclick')
                            print(f"      üîó Elemento broader: {onclick_attr[:100]}...")
                            if 'consultaSimples.do' in onclick_attr:
                                publicacao_elements.append(link)
                    
                    if not publicacao_elements and page_num == 1:
                        print("    ‚ÑπÔ∏è Nenhuma publica√ß√£o encontrada para os crit√©rios definidos.")
                        break
                    elif not publicacao_elements:
                        print(f"    ‚ÑπÔ∏è Fim dos resultados na p√°gina {page_num}")
                        break
                    else:
                        print(f"    üìã Processando {len(publicacao_elements)} publica√ß√µes na p√°gina {page_num}")
                        
                        # Processar cada elemento de publica√ß√£o
                        for i, element in enumerate(publicacao_elements, 1):
                            print(f"      üîç Processando publica√ß√£o {i}/{len(publicacao_elements)} da p√°gina {page_num}...")
                            
                            try:
                                # Clicar no link "Visualizar" para abrir o PDF
                                print(f"        üñ±Ô∏è Clicando em 'Visualizar' do item {i}...")
                                
                                # Salvar a janela atual
                                janela_principal = driver.current_window_handle
                                
                                # Clicar no elemento (que vai abrir nova janela/aba)
                                driver.execute_script("arguments[0].click();", element)
                                time.sleep(3)
                                
                                # Verificar se nova janela foi aberta
                                todas_janelas = driver.window_handles
                                if len(todas_janelas) > 1:
                                    # Mudar para a nova janela
                                    for janela in todas_janelas:
                                        if janela != janela_principal:
                                            driver.switch_to.window(janela)
                                            break
                                    
                                    print(f"        üìã Nova janela aberta: {driver.current_url}")
                                    time.sleep(5)  # Aguardar carregamento completo
                                    
                                    # Procurar pelo frame que cont√©m o PDF
                                    try:
                                        # Verificar se h√° frames na p√°gina
                                        frames = driver.find_elements(By.TAG_NAME, "frame")
                                        iframe_elements = driver.find_elements(By.TAG_NAME, "iframe")
                                        
                                        pdf_url = None
                                        
                                        # Tentar encontrar URL do PDF no HTML
                                        page_source = driver.page_source
                                        
                                        # Procurar por URLs de PDF no c√≥digo fonte
                                        import re
                                        pdf_patterns = [
                                            r'src="([^"]*\.pdf[^"]*)"',
                                            r"src='([^']*\.pdf[^']*)'",
                                            r'href="([^"]*\.pdf[^"]*)"',
                                            r"href='([^']*\.pdf[^']*)'",
                                            r'(https?://[^"\s]*\.pdf[^"\s]*)',
                                            r'/cdje/getPaginaDoDiario\.do[^"]*'
                                        ]
                                        
                                        for pattern in pdf_patterns:
                                            matches = re.findall(pattern, page_source, re.IGNORECASE)
                                            if matches:
                                                for match in matches:
                                                    if 'getPaginaDoDiario.do' in match or '.pdf' in match.lower():
                                                        if not match.startswith('http'):
                                                            if match.startswith('/'):
                                                                pdf_url = f"https://dje.tjsp.jus.br{match}"
                                                            else:
                                                                pdf_url = f"https://dje.tjsp.jus.br/{match}"
                                                        else:
                                                            pdf_url = match
                                                        print(f"        üìÑ PDF URL encontrada: {pdf_url}")
                                                        break
                                            if pdf_url:
                                                break
                                        
                                        # Se n√£o encontrou URL direta, tentar navegar pelos frames
                                        if not pdf_url and frames:
                                            print(f"        üîç Verificando {len(frames)} frames...")
                                            for frame_idx, frame in enumerate(frames):
                                                try:
                                                    driver.switch_to.frame(frame)
                                                    frame_source = driver.page_source
                                                    
                                                    # Procurar PDF no frame
                                                    for pattern in pdf_patterns:
                                                        matches = re.findall(pattern, frame_source, re.IGNORECASE)
                                                        if matches:
                                                            for match in matches:
                                                                if 'getPaginaDoDiario.do' in match or '.pdf' in match.lower():
                                                                    if not match.startswith('http'):
                                                                        pdf_url = f"https://dje.tjsp.jus.br{match}"
                                                                    else:
                                                                        pdf_url = match
                                                                    print(f"        üìÑ PDF encontrado no frame {frame_idx}: {pdf_url}")
                                                                    break
                                                        if pdf_url:
                                                            break
                                                    
                                                    driver.switch_to.default_content()
                                                    if pdf_url:
                                                        break
                                                except Exception as e:
                                                    print(f"        ‚ö†Ô∏è Erro ao acessar frame {frame_idx}: {e}")
                                                    driver.switch_to.default_content()
                                        
                                        # Extrair dados usando PDF ou HTML
                                        if pdf_url:
                                            print(f"        üì• Baixando e processando PDF: {pdf_url}")
                                            texto_pdf = self._download_pdf_text(pdf_url)
                                            if texto_pdf:
                                                publicacao_data = self._extrair_dados_do_texto(texto_pdf, pdf_url)
                                                print(f"        ‚úÖ Dados extra√≠dos do PDF")
                                            else:
                                                print(f"        ‚ö†Ô∏è N√£o foi poss√≠vel extrair texto do PDF, usando HTML")
                                                publicacao_data = self._extrair_dados_do_texto(page_source, driver.current_url)
                                        else:
                                            print(f"        ‚ö†Ô∏è PDF n√£o encontrado, usando HTML da p√°gina")
                                            publicacao_data = self._extrair_dados_do_texto(page_source, driver.current_url)
                                        
                                        if publicacao_data:
                                            all_publicacoes.append(publicacao_data)
                                            print(f"        ‚úÖ Publica√ß√£o processada: {publicacao_data.get('numero_processo', 'N/A')}")
                                            print(f"        üìã JSON: {publicacao_data}")
                                        else:
                                            print(f"        ‚ö†Ô∏è N√£o foi poss√≠vel extrair dados desta publica√ß√£o")
                                            
                                    except Exception as e:
                                        print(f"        ‚ùå Erro ao processar PDF/conte√∫do: {e}")
                                    
                                    # Fechar a janela atual e voltar para a principal
                                    driver.close()
                                    driver.switch_to.window(janela_principal)
                                    time.sleep(2)
                                    
                                else:
                                    print(f"        ‚ö†Ô∏è Nova janela n√£o foi aberta para item {i}")
                                    
                            except Exception as e:
                                print(f"        ‚ùå Erro ao processar publica√ß√£o {i}: {e}")
                                # Garantir que estamos na janela correta
                                try:
                                    todas_janelas = driver.window_handles
                                    if len(todas_janelas) > 1:
                                        for janela in todas_janelas[1:]:
                                            driver.switch_to.window(janela)
                                            driver.close()
                                        driver.switch_to.window(todas_janelas[0])
                                except Exception as cleanup_error:
                                    print(f"        ‚ö†Ô∏è Erro na limpeza: {cleanup_error}")
                                continue
                    
                    # Tentar ir para a pr√≥xima p√°gina
                    print(f"    üîÑ Procurando link para pr√≥xima p√°gina...")
                    try:
                        # Procurar por bot√£o "Pr√≥ximo" ou link de pr√≥xima p√°gina
                        next_page_found = False
                        
                        # Tentar encontrar link "Pr√≥ximo" primeiro
                        try:
                            next_button = driver.find_element(By.XPATH, "//a[contains(text(), 'Pr√≥ximo') or contains(text(), '>')]")
                            onclick_attr = next_button.get_attribute('onclick')
                            print(f"    üìÑ Bot√£o pr√≥ximo encontrado: {onclick_attr}")
                            
                            # Clicar no bot√£o pr√≥ximo
                            driver.execute_script("arguments[0].click();", next_button)
                            time.sleep(4)
                            page_num += 1
                            next_page_found = True
                            print(f"    üìÑ Navegou para p√°gina {page_num}")
                            
                        except Exception as e:
                            print(f"    ‚ö†Ô∏è Bot√£o 'Pr√≥ximo' n√£o encontrado: {e}")
                        
                        # Se n√£o encontrou bot√£o pr√≥ximo, tentar pelos n√∫meros das p√°ginas
                        if not next_page_found:
                            try:
                                # Procurar por link da pr√≥xima p√°gina (n√∫mero)
                                next_page_num = page_num + 1
                                page_link = driver.find_element(By.XPATH, f"//a[contains(@onclick, 'trocaDePg({next_page_num})')]")
                                
                                print(f"    üìÑ Link da p√°gina {next_page_num} encontrado")
                                driver.execute_script("arguments[0].click();", page_link)
                                time.sleep(4)
                                page_num = next_page_num
                                next_page_found = True
                                print(f"    üìÑ Navegou para p√°gina {page_num}")
                                
                            except Exception as e:
                                print(f"    ‚ö†Ô∏è Link da p√°gina {next_page_num} n√£o encontrado: {e}")
                        
                        if not next_page_found:
                            print(f"    üèÅ N√£o h√° mais p√°ginas. Finalizada na p√°gina {page_num}")
                            break
                        
                    except Exception as e:
                        print(f"    ‚ùå Erro ao navegar para pr√≥xima p√°gina: {e}")
                        break
                
                except Exception as e:
                    print(f"    ‚ùå Erro ao processar p√°gina {page_num}: {e}")
                    break
            
            print(f"üéâ Extra√ß√£o conclu√≠da! Total de publica√ß√µes extra√≠das: {len(all_publicacoes)}")
            
            # Log resumo final
            if all_publicacoes:
                print("üìä Resumo das publica√ß√µes:")
                for i, pub in enumerate(all_publicacoes[:5], 1):  # Mostrar 5 primeiras
                    print(f"  {i}. {pub.get('numero_processo', 'N/A')} - {pub.get('autores', 'N/A')[:30]}...")
            
            return all_publicacoes

        except Exception as e:
            print(f"‚ùå Erro fatal durante a extra√ß√£o: {e}")
            return []

    def _extrair_dados_do_texto(self, texto: str, url_origem: str) -> Dict[str, Any]:
        """Extrai dados estruturados do texto (PDF ou HTML)"""
        try:
            # Extrair n√∫mero do processo com padr√µes mais espec√≠ficos
            numero_processo = self._extrair_numero_processo(texto)
            
            # Extrair data de disponibiliza√ß√£o
            data_disponibilizacao = self._extrair_data_disponibilizacao(texto)
            
            # Extrair informa√ß√µes de RPV espec√≠ficas
            autor_info = self._extrair_autor_rpv(texto)
            advogado_info = self._extrair_advogado_rpv(texto) 
            
            # Extrair valores monet√°rios espec√≠ficos para RPV
            valores = self._extrair_valores_rpv(texto)
            
            return {
                'numero_processo': numero_processo or 'N√£o identificado',
                'data_disponibilizacao': data_disponibilizacao,
                'autores': autor_info or 'N√£o identificado', 
                'advogados': advogado_info or 'N√£o identificado',
                'conteudo_completo': texto[:2000] + '...' if len(texto) > 2000 else texto,  # Limitar tamanho
                'valor_principal_bruto': valores.get('bruto'),
                'valor_principal_liquido': valores.get('liquido'),
                'valor_juros_moratorios': valores.get('juros'),
                'honorarios_advocaticios': valores.get('honorarios'),
                'reu': 'Instituto Nacional do Seguro Social - INSS',  # Sempre INSS conforme solicitado
                'url_origem': url_origem
            }
            
        except Exception as e:
            print(f"‚ùå Erro ao extrair dados do texto: {e}")
            return None

    def _extrair_numero_processo(self, texto: str) -> str:
        """Extrai n√∫mero do processo com padr√µes espec√≠ficos"""
        # Padr√£o padr√£o: 0000000-00.0000.0.00.0000
        patterns = [
            r'\b\d{7}-\d{2}\.\d{4}\.\d{1}\.\d{2}\.\d{4}\b',
            r'\b\d{7}-\d{2}\.\d{4}\.\d\.\d{2}\.\d{4}\b',
            r'Processo\s+n[¬∫o¬∞\.]*\s*(\d{7}-\d{2}\.\d{4}\.\d{1}\.\d{2}\.\d{4})',
            r'Proc\.*\s*(\d{7}-\d{2}\.\d{4}\.\d{1}\.\d{2}\.\d{4})',
            r'Autos\s+n[¬∫o¬∞\.]*\s*(\d{7}-\d{2}\.\d{4}\.\d{1}\.\d{2}\.\d{4})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                return match.group(1) if len(match.groups()) > 0 else match.group(0)
        return None

    def _extrair_data_disponibilizacao(self, texto: str) -> datetime:
        """Extrai data de disponibiliza√ß√£o"""
        patterns = [
            r'(\d{2}/\d{2}/\d{4})',
            r'data[:\s]+(\d{2}/\d{2}/\d{4})',
            r'disponibiliza[^:]*:?\s*(\d{2}/\d{2}/\d{4})',
            r'publicad[oa]\s+em[:\s]*(\d{2}/\d{2}/\d{4})',
            r'(\d{1,2})\s+de\s+(\w+)\s+de\s+(\d{4})'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                try:
                    if len(match.groups()) == 3:  # Formato "1 de janeiro de 2025"
                        dia, mes_nome, ano = match.groups()
                        meses = {'janeiro': 1, 'fevereiro': 2, 'mar√ßo': 3, 'abril': 4, 'maio': 5, 'junho': 6,
                               'julho': 7, 'agosto': 8, 'setembro': 9, 'outubro': 10, 'novembro': 11, 'dezembro': 12}
                        mes = meses.get(mes_nome.lower())
                        if mes:
                            return datetime(int(ano), mes, int(dia))
                    else:
                        data_str = match.group(1) if len(match.groups()) > 0 else match.group(0)
                        return datetime.strptime(data_str, "%d/%m/%Y")
                except:
                    continue
        return None

    def _extrair_autor_rpv(self, texto: str) -> str:
        """Extrai informa√ß√µes do autor em casos de RPV"""
        patterns = [
            r'(?:Requerente|Autor|Exequente|Benefici√°rio)[:\s]*([^,\n\r]+?)(?:\s+(?:CPF|RG|contra)|,|\n|\r|$)',
            r'RPV\s+em\s+favor\s+de[:\s]*([^,\n\r]+?)(?:\s+(?:CPF|RG|contra)|,|\n|\r|$)',
            r'benefici√°rio[:\s]*([^,\n\r]+?)(?:\s+(?:CPF|RG|contra)|,|\n|\r|$)',
            r'em\s+face\s+de[:\s]*([^,\n\r]+?)(?:\s+(?:CPF|RG|contra)|,|\n|\r|$)'
        ]
        
        for pattern in patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                autor = match.group(1).strip()
                # Limpar texto desnecess√°rio
                autor = re.sub(r'\s+', ' ', autor)
                autor = re.sub(r'[,\.\:]$', '', autor)
                if len(autor) > 3 and not re.match(r'^\d+$', autor):  # Evitar n√∫meros puros
                    return autor
        return None

    def _extrair_advogado_rpv(self, texto: str) -> str:
        """Extrai informa√ß√µes do advogado em casos de RPV"""
        patterns = [
            r'Advogad[oa][:\s]*([^(\n\r]+?)\s*\(OAB[:\s]*(\d+/[A-Z]{2})\)',
            r'Dr[a¬™]?\.\s*([^(\n\r]+?)\s*\(OAB[:\s]*(\d+/[A-Z]{2})\)',
            r'([A-Z√Å√ä√á][a-z√°√™√ß√µ√£]+(?:\s+[A-Z√Å√ä√á][a-z√°√™√ß√µ√£]+)*)\s*\(OAB[:\s]*(\d+/[A-Z]{2})\)',
            r'representad[oa]\s+por[:\s]*([^(\n\r]+?)\s*\(OAB[:\s]*(\d+/[A-Z]{2})\)'
        ]
        
        advogados = []
        for pattern in patterns:
            matches = re.finditer(pattern, texto, re.IGNORECASE)
            for match in matches:
                nome = match.group(1).strip()
                oab = match.group(2).strip() if len(match.groups()) > 1 else ''
                # Limpar nome
                nome = re.sub(r'\s+', ' ', nome)
                nome = re.sub(r'[,\.\:]$', '', nome)
                if len(nome) > 3:
                    advogado_info = f"{nome} (OAB: {oab})" if oab else nome
                    if advogado_info not in advogados:
                        advogados.append(advogado_info)
        
        return ', '.join(advogados) if advogados else None

    def _extrair_valores_rpv(self, texto: str) -> Dict[str, float]:
        """Extrai valores monet√°rios espec√≠ficos para RPV"""
        valores = {'bruto': None, 'liquido': None, 'juros': None, 'honorarios': None}
        
        # Padr√µes para valores monet√°rios
        patterns = {
            'bruto': [
                r'valor\s+principal\s+bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'principal\s+bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'valor\s+bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'montante\s+bruto[:\s]*R?\$?\s*([\d.,]+)'
            ],
            'liquido': [
                r'valor\s+principal\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'principal\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'valor\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'montante\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)'
            ],
            'juros': [
                r'juros\s+morat√≥rios[:\s]*R?\$?\s*([\d.,]+)',
                r'juros[:\s]*R?\$?\s*([\d.,]+)',
                r'morat√≥rios[:\s]*R?\$?\s*([\d.,]+)',
                r'corre√ß√£o\s+monet√°ria[:\s]*R?\$?\s*([\d.,]+)'
            ],
            'honorarios': [
                r'honor√°rios\s+advocat√≠cios[:\s]*R?\$?\s*([\d.,]+)',
                r'honor√°rios[:\s]*R?\$?\s*([\d.,]+)',
                r'advocat√≠cios[:\s]*R?\$?\s*([\d.,]+)',
                r'sucumb√™ncia[:\s]*R?\$?\s*([\d.,]+)'
            ]
        }
        
        for tipo, pattern_list in patterns.items():
            for pattern in pattern_list:
                match = re.search(pattern, texto, re.IGNORECASE)
                if match:
                    try:
                        valor_str = match.group(1).replace('.', '').replace(',', '.')
                        valores[tipo] = float(valor_str)
                        break  # Parar no primeiro valor encontrado para cada tipo
                    except ValueError:
                        continue
        
        return valores

    def take_screenshot(self, filename: str = None):
        """Tira screenshot da p√°gina atual"""
        driver = self.get_driver()
        if not driver:
            print("‚ùå Driver n√£o inicializado")
            return
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"scraping_screenshot_{timestamp}.png"
        
        try:
            driver.save_screenshot(filename)
            print(f"üì∏ Screenshot salva: {filename}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar screenshot: {e}")

    def get_page_info(self):
        """Mostra informa√ß√µes da p√°gina atual"""
        driver = self.get_driver()
        if not driver:
            print("‚ùå Driver n√£o inicializado")
            return
        
        print(f"üåê URL atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo: {driver.title}")
        print(f"üñ•Ô∏è Tamanho da janela: {driver.get_window_size()}")

    def close(self):
        """Fecha o driver e reseta a inst√¢ncia para permitir recria√ß√£o."""
        with self._lock:
            if self.driver:
                try:
                    self.driver.quit()
                    print("‚úÖ Chrome fechado com sucesso")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao fechar driver: {e}")
                finally:
                    self.driver = None
                    self.wait = None
                    
            if self.__class__._instance:
                self.__class__._instance = None
            
            if hasattr(self, 'initialized'):
                del self.initialized

    def _wait_for_page_load(self, timeout=30):
        """Aguarda o carregamento completo da p√°gina"""
        try:
            # Aguardar documento estar pronto
            WebDriverWait(self.driver, timeout).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            # Aguardar jQuery terminar (se existir)
            try:
                WebDriverWait(self.driver, 5).until(
                    lambda driver: driver.execute_script("return typeof jQuery === 'undefined' || jQuery.active == 0")
                )
            except:
                pass  # jQuery pode n√£o existir
            
            # Aguardar um pouco mais para elementos din√¢micos
            time.sleep(2)
            print("    ‚úÖ P√°gina carregada completamente")
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è Timeout aguardando carregamento da p√°gina: {e}")

    def _wait_for_element_ready(self, by, value, timeout=30):
        """Aguarda elemento estar vis√≠vel, habilitado e pronto para intera√ß√£o"""
        try:
            # Aguardar elemento estar presente
            element = self.wait.until(EC.presence_of_element_located((by, value)))
            
            # Aguardar estar vis√≠vel
            self.wait.until(EC.visibility_of_element_located((by, value)))
            
            # Aguardar estar clic√°vel
            element = self.wait.until(EC.element_to_be_clickable((by, value)))
            
            # Verifica√ß√£o adicional de estado usando JavaScript
            for attempt in range(10):  # Aumentei para 10 tentativas
                try:
                    # Usar JavaScript para verificar se o elemento est√° realmente pronto
                    is_ready = self.driver.execute_script("""
                        var element = arguments[0];
                        return element && 
                               element.offsetWidth > 0 && 
                               element.offsetHeight > 0 && 
                               !element.disabled && 
                               element.style.display !== 'none' &&
                               element.style.visibility !== 'hidden';
                    """, element)
                    
                    if is_ready:
                        # Scroll para o elemento usando JavaScript
                        self.driver.execute_script("""
                            arguments[0].scrollIntoView({
                                behavior: 'smooth', 
                                block: 'center',
                                inline: 'center'
                            });
                        """, element)
                        time.sleep(1)  # Aguardar scroll completar
                        
                        # Verificar novamente ap√≥s scroll
                        element = self.driver.find_element(by, value)
                        return element
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è Tentativa {attempt + 1}: Elemento n√£o pronto: {e}")
                    time.sleep(1)
                    # Re-localizar elemento
                    try:
                        element = self.driver.find_element(by, value)
                    except:
                        element = self.wait.until(EC.presence_of_element_located((by, value)))
            
            print(f"    ‚úÖ Elemento {value} pronto para intera√ß√£o")
            return element
            
        except Exception as e:
            print(f"    ‚ùå Erro ao aguardar elemento {value}: {e}")
            raise

    def _safe_send_keys(self, element, text, clear_first=True):
        """Envia texto de forma segura com JavaScript como fallback"""
        try:
            # Primeira tentativa: Selenium normal
            if clear_first:
                try:
                    element.clear()
                    time.sleep(0.5)
                except:
                    # Fallback: limpar via JavaScript
                    self.driver.execute_script("arguments[0].value = '';", element)
                    time.sleep(0.5)
            
            # Verificar se o elemento ainda est√° ativo
            is_interactive = self.driver.execute_script("""
                var element = arguments[0];
                return element && !element.disabled && element.style.display !== 'none';
            """, element)
            
            if not is_interactive:
                raise Exception("Elemento n√£o est√° mais dispon√≠vel")
            
            # Tentar enviar texto via Selenium
            try:
                element.send_keys(text)
                time.sleep(0.5)
            except:
                # Fallback: usar JavaScript
                print(f"    ‚ö†Ô∏è Selenium falhou, usando JavaScript para inserir texto")
                self.driver.execute_script("arguments[0].value = arguments[1];", element, text)
                # Disparar eventos de mudan√ßa
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', {bubbles: true}));
                    element.dispatchEvent(new Event('change', {bubbles: true}));
                """, element)
                time.sleep(0.5)
            
            # Verificar se o texto foi inserido
            current_value = element.get_attribute('value')
            if current_value != text:
                print(f"    ‚ö†Ô∏è Valor esperado: {text}, valor atual: {current_value}")
                # Tentar novamente via JavaScript
                self.driver.execute_script("arguments[0].value = arguments[1];", element, text)
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', {bubbles: true}));
                    element.dispatchEvent(new Event('change', {bubbles: true}));
                """, element)
                
            print(f"    ‚úÖ Texto inserido: {text}")
            return True
            
        except Exception as e:
            print(f"    ‚ùå Erro ao inserir texto: {e}")
            raise

    def _safe_click(self, element):
        """Clica de forma segura com m√∫ltiplos fallbacks"""
        try:
            # Verificar se elemento est√° dispon√≠vel via JavaScript
            is_clickable = self.driver.execute_script("""
                var element = arguments[0];
                return element && 
                       !element.disabled && 
                       element.style.display !== 'none' &&
                       element.style.visibility !== 'hidden';
            """, element)
            
            if not is_clickable:
                raise Exception("Elemento n√£o est√° dispon√≠vel para click")
            
            # Primeira tentativa: click normal do Selenium
            try:
                element.click()
                print(f"    ‚úÖ Click normal realizado")
                return True
            except:
                print(f"    ‚ö†Ô∏è Click normal falhou, tentando JavaScript")
                
            # Segunda tentativa: JavaScript click
            try:
                self.driver.execute_script("arguments[0].click();", element)
                print(f"    ‚úÖ Click via JavaScript realizado")
                return True
            except:
                print(f"    ‚ö†Ô∏è JavaScript click falhou, tentando dispatchEvent")
                
            # Terceira tentativa: Simular evento de click
            try:
                self.driver.execute_script("""
                    var element = arguments[0];
                    var event = new MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true
                    });
                    element.dispatchEvent(event);
                """, element)
                print(f"    ‚úÖ Click via dispatchEvent realizado")
                return True
            except Exception as e3:
                print(f"    ‚ùå Todos os m√©todos de click falharam: {e3}")
                raise
                
        except Exception as e:
            print(f"    ‚ùå Erro geral no click: {e}")
            raise

    def _find_pdf_url(self, html: str) -> str:
        import re
        match = re.search(r"https?://[^"]+\.pdf", html, re.IGNORECASE)
        if match:
            return match.group(0)
        return None

    def _download_pdf_text(self, pdf_url: str) -> str:
        try:
            r = requests.get(pdf_url, timeout=30)
            if r.status_code == 200:
                with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
                    tmp.write(r.content)
                    tmp_path = tmp.name
                text = ""
                with pdfplumber.open(tmp_path) as pdf:
                    pages = [p.extract_text() or "" for p in pdf.pages]
                    text = "\n".join(pages)
                os.unlink(tmp_path)
                return text
        except Exception as e:
            print(f"Erro ao baixar PDF {e}")
        return ""

    def _extrair_dados_pagina_individual(self, driver) -> Dict[str, Any]:
        """Extrai dados detalhados de uma p√°gina individual de publica√ß√£o"""
        try:
            # Aguardar a p√°gina carregar
            time.sleep(3)
            
            html = driver.page_source
            pdf_url = self._find_pdf_url(html)
            
            # Se encontrou PDF, baixar e extrair texto
            if pdf_url:
                print(f"        üì• Baixando PDF: {pdf_url}")
                texto_pdf = self._download_pdf_text(pdf_url)
                if texto_pdf:
                    return self._extrair_dados_do_texto(texto_pdf, driver.current_url)
                else:
                    print(f"        ‚ö†Ô∏è Falha ao extrair texto do PDF, usando HTML")
            
            # Se n√£o h√° PDF ou falhou, usar HTML
            print(f"        üìÑ Extraindo dados do HTML")
            return self._extrair_dados_do_texto(html, driver.current_url)
            
        except Exception as e:
            print(f"        ‚ùå Erro ao extrair dados da p√°gina individual: {e}")
            return None 