import re
import time
import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from bs4 import BeautifulSoup
import requests
import tempfile
import uuid
import threading

class DJEScraperDebug:
    """
    Vers√£o de debug do DJEScraper que permite visualizar o Chrome em execu√ß√£o
    e implementa o padr√£o Singleton para garantir uma √∫nica inst√¢ncia.
    """
    _instance = None
    _lock = threading.Lock()

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            with cls._lock:
                if not cls._instance:
                    cls._instance = super(DJEScraperDebug, cls).__new__(cls)
        return cls._instance

    def __init__(self, base_url: str = "https://dje.tjsp.jus.br/cdje/index.do", visual_mode: bool = False):
        if not hasattr(self, 'initialized'):
            with self._lock:
                if not hasattr(self, 'initialized'):
                    self.base_url = base_url
                    self.session = requests.Session()
                    self.driver = None
                    self.wait = None
                    self.max_retries = 3
                    self.visual_mode = visual_mode
                    logging.basicConfig(level=logging.INFO)
                    # N√ÉO inicializar o driver aqui
                    self.initialized = True

    def get_driver(self):
        """Obt√©m o driver, inicializando-o se necess√°rio."""
        with self._lock:
            if self.driver is None:
                self._initialize_driver()
            
            # Verificar se o driver est√° vivo
            try:
                # Uma opera√ß√£o simples como pegar a URL atual pode verificar a conex√£o
                _ = self.driver.current_url
            except Exception as e:
                print(f"‚ö†Ô∏è Driver n√£o responsivo ({e}), tentando reiniciar...")
                try:
                    self.driver.quit()
                except:
                    pass
                self.driver = None
                self._initialize_driver()

            return self.driver

    def _get_chrome_options(self):
        """Configura√ß√µes do Chrome - com op√ß√£o visual para debug"""
        chrome_options = Options()
        
        # Configurar display virtual se dispon√≠vel
        if 'DISPLAY' not in os.environ:
            os.environ['DISPLAY'] = ':99'
        
        # Criar diret√≥rio de dados √∫nico para esta sess√£o
        user_data_dir = f"/tmp/chrome_data_{uuid.uuid4().hex[:8]}"
        chrome_options.add_argument(f"--user-data-dir={user_data_dir}")
        
        # MODO VISUAL: Comentar --headless para ver o Chrome
        if not self.visual_mode:
            chrome_options.add_argument("--headless")
        else:
            print("üñ•Ô∏è MODO VISUAL ATIVADO - Chrome ser√° vis√≠vel!")
            # Para modo visual, usar configura√ß√µes mais simples
            chrome_options.add_argument("--window-size=1920,1080")
            chrome_options.add_argument("--start-maximized")
            chrome_options.add_argument("--display=:99")
            return chrome_options
        
        # Configura√ß√µes essenciais para container
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-web-security")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_argument("--disable-background-timer-throttling")
        chrome_options.add_argument("--disable-backgrounding-occluded-windows")
        chrome_options.add_argument("--disable-renderer-backgrounding")
        chrome_options.add_argument("--disable-features=TranslateUI")
        chrome_options.add_argument("--disable-ipc-flooding-protection")
        chrome_options.add_argument("--memory-pressure-off")
        chrome_options.add_argument("--max_old_space_size=4096")
        chrome_options.add_argument("--single-process")
        chrome_options.add_argument("--no-zygote")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--disable-popup-blocking")
        chrome_options.add_argument("--aggressive-cache-discard")
        chrome_options.add_argument("--disable-background-networking")
        chrome_options.add_argument("--display=:99")
        chrome_options.add_argument("--remote-debugging-port=0")  # Porta aleat√≥ria
        chrome_options.add_argument("--disable-crash-reporter")
        chrome_options.add_argument("--disable-logging")
        chrome_options.add_argument("--disable-in-process-stack-traces")
        chrome_options.add_argument("--disable-background-mode")
        chrome_options.add_argument("--disable-default-apps")
        chrome_options.add_argument("--disable-sync")
        
        # NOVO: Configura√ß√µes para melhor estabilidade
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--disable-infobars")
        chrome_options.add_argument("--disable-notifications")
        chrome_options.add_argument("--disable-save-password-bubble")
        chrome_options.add_argument("--disable-translate")
        chrome_options.add_argument("--disable-features=VizDisplayCompositor,VizHitTestSurfaceLayer")
        chrome_options.add_argument("--force-device-scale-factor=1")
        chrome_options.add_argument("--ignore-certificate-errors")
        chrome_options.add_argument("--ignore-ssl-errors")
        chrome_options.add_argument("--allow-running-insecure-content")
        chrome_options.add_argument("--disable-component-update")
        chrome_options.add_argument("--disable-domain-reliability")
        chrome_options.add_argument("--disable-features=TranslateUI,BlinkGenPropertyTrees")
        chrome_options.add_argument("--disable-hang-monitor")
        chrome_options.add_argument("--disable-prompt-on-repost")
        chrome_options.add_argument("--disable-web-resources")
        chrome_options.add_argument("--enable-automation")
        chrome_options.add_argument("--hide-scrollbars")
        chrome_options.add_argument("--mute-audio")
        chrome_options.add_argument("--no-first-run")
        chrome_options.add_argument("--no-default-browser-check")
        chrome_options.add_argument("--password-store=basic")
        chrome_options.add_argument("--use-mock-keychain")
        
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging', 'enable-automation'])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_experimental_option('detach', False)  # N√£o destacar
        
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        return chrome_options

    def _initialize_driver(self):
        """Inicializa o driver com configura√ß√µes de debug"""
        chrome_options = self._get_chrome_options()
        
        # Configurar display virtual
        if 'DISPLAY' not in os.environ:
            os.environ['DISPLAY'] = ':99'
            print("üñ•Ô∏è Display configurado para :99")
        
        for attempt in range(self.max_retries):
            try:
                logging.info(f"üöÄ Tentativa {attempt + 1} de inicializar Chrome driver...")
                
                if self.visual_mode:
                    print(f"üéØ Modo: VISUAL (Chrome ser√° vis√≠vel no display {os.environ.get('DISPLAY', 'padr√£o')})")
                else:
                    print(f"üéØ Modo: HEADLESS (Chrome oculto)")
                
                # Estrat√©gia 1: Usar chromedriver do sistema (instalado no Dockerfile)
                try:
                    self.driver = webdriver.Chrome(
                        service=Service('/usr/bin/chromedriver'),
                        options=chrome_options
                    )
                    logging.info("‚úÖ Driver inicializado com chromedriver do sistema")
                    break
                except Exception as e:
                    logging.warning(f"ChromeDriver do sistema falhou: {e}")
                    
                # Estrat√©gia 2: Usar link simb√≥lico
                try:
                    self.driver = webdriver.Chrome(
                        service=Service('/usr/local/bin/chromedriver'),
                        options=chrome_options
                    )
                    logging.info("‚úÖ Driver inicializado com link simb√≥lico")
                    break
                except Exception as e:
                    logging.warning(f"Link simb√≥lico falhou: {e}")
                    
                # Estrat√©gia 3: Fallback para webdriver-manager
                try:
                    service = Service(ChromeDriverManager().install())
                    self.driver = webdriver.Chrome(service=service, options=chrome_options)
                    logging.info("‚úÖ Driver inicializado com webdriver-manager")
                    break
                except Exception as e:
                    logging.warning(f"Webdriver-manager falhou: {e}")
                    
                # Estrat√©gia 4: Chrome sem service espec√≠fico
                try:
                    self.driver = webdriver.Chrome(options=chrome_options)
                    logging.info("‚úÖ Driver inicializado com Chrome padr√£o")
                    break
                except Exception as e:
                    logging.warning(f"Chrome padr√£o falhou: {e}")
            
            except Exception as e:
                logging.error(f"‚ùå Erro na tentativa {attempt + 1}: {e}")
                if self.driver:
                    try:
                        self.driver.quit()
                    except: pass
                    self.driver = None
                
                if attempt == self.max_retries - 1:
                    raise Exception(f"Falha cr√≠tica ao inicializar Chrome ap√≥s {self.max_retries} tentativas: {e}")
                
                time.sleep(2)
        
        if self.driver:
            self.driver.set_page_load_timeout(45)
            self.driver.implicitly_wait(15)
            self.wait = WebDriverWait(self.driver, 30)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            if self.visual_mode:
                print(f"üåê Chrome aberto! URL atual: {self.driver.current_url}")

    def extrair_publicacoes_debug(self, data_inicio: datetime, data_fim: datetime, pause_between_steps: bool = True) -> List[Dict[str, Any]]:
        """Vers√£o debug com navega√ß√£o completa em cada resultado e pagina√ß√£o"""
        driver = self.get_driver()
        if not driver:
            logging.error("‚ùå Driver n√£o est√° operacional. Abortando extra√ß√£o.")
            return []

        print(f"üï∑Ô∏è Iniciando extra√ß√£o COMPLETA de {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
        
        try:
            # Etapa 1: Acessar o site
            print("üìç Etapa 1: Acessando o site do DJE...")
            driver.get(self.base_url)
            
            # Aguardar carregamento completo
            print("  ‚è≥ Aguardando carregamento completo da p√°gina...")
            self._wait_for_page_load()
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para continuar para o preenchimento do formul√°rio...")

            # Etapa 2: Preencher formul√°rio
            print("üìç Etapa 2: Preenchendo formul√°rio de pesquisa...")
            
            # Aguardar campo data in√≠cio estar dispon√≠vel e interag√≠vel
            print(f"  üìÖ Aguardando campo data in√≠cio...")
            data_inicio_field = self._wait_for_element_ready(By.ID, "dtInicioString")
            self._safe_send_keys(data_inicio_field, data_inicio.strftime("%d/%m/%Y"))
            
            # Aguardar campo data fim estar dispon√≠vel
            print(f"  üìÖ Aguardando campo data fim...")
            data_fim_field = self._wait_for_element_ready(By.ID, "dtFimString")
            self._safe_send_keys(data_fim_field, data_fim.strftime("%d/%m/%Y"))
            
            # Aguardar select caderno estar dispon√≠vel
            print("  üìÇ Aguardando select caderno...")
            select_caderno_element = self._wait_for_element_ready(By.NAME, "dadosConsulta.cdCaderno")
            
            # Usar JavaScript para selecionar o valor do select
            try:
                select_caderno = Select(select_caderno_element)
                select_caderno.select_by_value("-11")
                print("  ‚úÖ Caderno selecionado via Selenium")
            except:
                print("  ‚ö†Ô∏è Selenium falhou, usando JavaScript para select")
                driver.execute_script("""
                    var select = arguments[0];
                    select.value = '-11';
                    select.dispatchEvent(new Event('change', {bubbles: true}));
                """, select_caderno_element)
                print("  ‚úÖ Caderno selecionado via JavaScript")

            # Aguardar campo de busca estar dispon√≠vel
            print("  üîç Aguardando campo de busca...")
            search_box = self._wait_for_element_ready(By.ID, "procura")
            self._safe_send_keys(search_box, '"instituto nacional do seguro social" E inss')
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para submeter o formul√°rio...")
            
            # Etapa 3: Submeter formul√°rio
            print("üìç Etapa 3: Submetendo formul√°rio...")
            
            # Aguardar bot√£o submit estar dispon√≠vel
            print("  üîò Aguardando bot√£o submit...")
            submit_button = self._wait_for_element_ready(By.CSS_SELECTOR, "form[name='consultaAvancadaForm'] input[type='submit']")
            self._safe_click(submit_button)

            print("‚è≥ Aguardando resultados...")
            time.sleep(8)
            
            if pause_between_steps and self.visual_mode:
                input("‚è∏Ô∏è Pressione Enter para processar os resultados...")

            # Etapa 4: Processar TODAS as p√°ginas de resultados
            print("üìç Etapa 4: Processando TODAS as p√°ginas de resultados...")
            all_publicacoes = []
            page_num = 1
            
            while True:
                print(f"  üìÑ Processando p√°gina {page_num}...")
                
                try:
                    # Aguardar div de resultados
                    print(f"    ‚è≥ Aguardando div de resultados da p√°gina {page_num}...")
                    self.wait.until(EC.presence_of_element_located((By.ID, "divResultadosInferior")))
                    time.sleep(3)
                    
                    # Verificar se h√° erro na p√°gina
                    page_source = driver.page_source.lower()
                    if "erro" in page_source or "error" in page_source:
                        print(f"    ‚ö†Ô∏è Poss√≠vel erro detectado na p√°gina {page_num}")
                    
                    soup = BeautifulSoup(driver.page_source, 'html.parser')
                    
                    # Buscar por elementos de publica√ß√£o (links clic√°veis)
                    publicacao_links = soup.select('div#divResultadosInferior a[href*="consultaSimples.do"]')
                    
                    if not publicacao_links and page_num == 1:
                        print("    ‚ÑπÔ∏è Nenhuma publica√ß√£o encontrada para os crit√©rios definidos.")
                        break
                    elif not publicacao_links:
                        print(f"    ‚ÑπÔ∏è Fim dos resultados na p√°gina {page_num}")
                        break
                    else:
                        print(f"    üìã Encontrados {len(publicacao_links)} links de publica√ß√µes na p√°gina {page_num}")
                        
                        # Processar cada link de publica√ß√£o
                        for i, link in enumerate(publicacao_links, 1):
                            print(f"      üîç Processando publica√ß√£o {i}/{len(publicacao_links)} da p√°gina {page_num}...")
                            
                            try:
                                # Obter URL do link
                                href = link.get('href')
                                if href:
                                    # Construir URL completa
                                    if href.startswith('/'):
                                        full_url = f"https://dje.tjsp.jus.br{href}"
                                    elif href.startswith('consultaSimples.do'):
                                        full_url = f"https://dje.tjsp.jus.br/cdje/{href}"
                                    else:
                                        full_url = href
                                    
                                    print(f"        üåê Navegando para: {full_url}")
                                    
                                    # Navegar para a p√°gina espec√≠fica da publica√ß√£o
                                    driver.get(full_url)
                                    time.sleep(2)
                                    
                                    # Extrair dados detalhados desta p√°gina
                                    publicacao_data = self._extrair_dados_pagina_individual(driver)
                                    
                                    if publicacao_data:
                                        all_publicacoes.append(publicacao_data)
                                        print(f"        ‚úÖ Dados extra√≠dos: {publicacao_data.get('numero_processo', 'N/A')}")
                                        
                                        # Log do JSON extra√≠do (para debug)
                                        print(f"        üìã JSON: {publicacao_data}")
                                    else:
                                        print(f"        ‚ö†Ô∏è N√£o foi poss√≠vel extrair dados desta publica√ß√£o")
                                    
                                    # Voltar para a p√°gina de resultados
                                    driver.back()
                                    time.sleep(2)
                                    
                            except Exception as e:
                                print(f"        ‚ùå Erro ao processar publica√ß√£o {i}: {e}")
                                # Tentar voltar para a p√°gina de resultados em caso de erro
                                try:
                                    driver.back()
                                    time.sleep(1)
                                except:
                                    # Se back() falhar, navegar novamente para os resultados
                                    # (seria necess√°rio resubmeter o formul√°rio)
                                    pass
                                continue
                    
                    # Tentar ir para a pr√≥xima p√°gina
                    print(f"    üîÑ Procurando link para pr√≥xima p√°gina...")
                    try:
                        # Atualizar o soup com a p√°gina atual
                        soup = BeautifulSoup(driver.page_source, 'html.parser')
                        
                        # Procurar por links de pagina√ß√£o
                        next_links = soup.select('a[href*="nuSeqpagina"]')
                        next_page_link = None
                        
                        for link in next_links:
                            if 'pr√≥ximo' in link.get_text().lower() or '>' in link.get_text():
                                next_page_link = link
                                break
                        
                        if next_page_link:
                            href = next_page_link.get('href')
                            if href:
                                print(f"    üìÑ Navegando para pr√≥xima p√°gina...")
                                
                                # Construir URL da pr√≥xima p√°gina
                                if href.startswith('/'):
                                    next_url = f"https://dje.tjsp.jus.br{href}"
                                else:
                                    next_url = f"https://dje.tjsp.jus.br/cdje/{href}"
                                
                                driver.get(next_url)
                                time.sleep(3)
                                page_num += 1
                                continue
                        
                        print(f"    üèÅ N√£o h√° mais p√°ginas. Finalizada na p√°gina {page_num}")
                        break
                        
                    except Exception as e:
                        print(f"    ‚ùå Erro ao navegar para pr√≥xima p√°gina: {e}")
                        break
                
                except Exception as e:
                    print(f"    ‚ùå Erro ao processar p√°gina {page_num}: {e}")
                    break
            
            print(f"üéâ Extra√ß√£o conclu√≠da! Total de publica√ß√µes extra√≠das: {len(all_publicacoes)}")
            
            # Log resumo final
            if all_publicacoes:
                print("üìä Resumo das publica√ß√µes:")
                for i, pub in enumerate(all_publicacoes[:5], 1):  # Mostrar 5 primeiras
                    print(f"  {i}. {pub.get('numero_processo', 'N/A')} - {pub.get('autores', 'N/A')[:30]}...")
            
            return all_publicacoes

        except Exception as e:
            print(f"‚ùå Erro fatal durante a extra√ß√£o: {e}")
            return []

    def _extrair_dados_pagina_individual(self, driver) -> Dict[str, Any]:
        """Extrai dados detalhados de uma p√°gina individual de publica√ß√£o"""
        try:
            # Aguardar a p√°gina carregar
            time.sleep(2)
            
            # Obter HTML da p√°gina
            soup = BeautifulSoup(driver.page_source, 'html.parser')
            
            # Extrair conte√∫do completo da publica√ß√£o
            conteudo_completo = ""
            
            # Tentar diferentes seletores para encontrar o conte√∫do
            content_selectors = [
                'div.ementaClass2',
                'div.ementaClass',
                'td.ementaClass2',
                'td.ementaClass',
                '.fundocinza1',
                'tbody tr td'
            ]
            
            for selector in content_selectors:
                elements = soup.select(selector)
                if elements:
                    conteudo_completo = ' '.join([el.get_text(strip=True) for el in elements])
                    if conteudo_completo:
                        break
            
            # Se n√£o encontrou com seletores espec√≠ficos, pegar todo o texto da p√°gina
            if not conteudo_completo:
                body = soup.find('body')
                if body:
                    conteudo_completo = body.get_text(strip=True)
            
            if not conteudo_completo:
                print(f"        ‚ö†Ô∏è N√£o foi poss√≠vel extrair conte√∫do da p√°gina")
                return None
            
            # Extrair n√∫mero do processo
            numero_processo = self._extrair_numero_processo(conteudo_completo)
            if not numero_processo:
                print(f"        ‚ö†Ô∏è N√£o foi poss√≠vel extrair n√∫mero do processo")
                return None
            
            # Extrair data de disponibiliza√ß√£o
            data_disponibilizacao = None
            data_patterns = [
                r'(\d{2}/\d{2}/\d{4})',
                r'data[:\s]+(\d{2}/\d{2}/\d{4})',
                r'disponibiliza[^:]*:?\s*(\d{2}/\d{2}/\d{4})'
            ]
            
            for pattern in data_patterns:
                match = re.search(pattern, conteudo_completo, re.IGNORECASE)
                if match:
                    try:
                        data_disponibilizacao = datetime.strptime(match.group(1), "%d/%m/%Y")
                        break
                    except:
                        continue
            
            # Extrair informa√ß√µes financeiras com padr√µes mais abrangentes
            valor_principal_bruto = self._extrair_valor_monetario(conteudo_completo, [
                r'valor\s+principal\s+bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'principal\s+bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'bruto[:\s]*R?\$?\s*([\d.,]+)',
                r'valor\s+bruto[:\s]*R?\$?\s*([\d.,]+)'
            ])
            
            valor_principal_liquido = self._extrair_valor_monetario(conteudo_completo, [
                r'valor\s+principal\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'principal\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'l√≠quido[:\s]*R?\$?\s*([\d.,]+)',
                r'valor\s+l√≠quido[:\s]*R?\$?\s*([\d.,]+)'
            ])
            
            valor_juros_moratorios = self._extrair_valor_monetario(conteudo_completo, [
                r'juros\s+morat√≥rios[:\s]*R?\$?\s*([\d.,]+)',
                r'juros[:\s]*R?\$?\s*([\d.,]+)',
                r'morat√≥rios[:\s]*R?\$?\s*([\d.,]+)'
            ])
            
            honorarios_advocaticios = self._extrair_valor_monetario(conteudo_completo, [
                r'honor√°rios\s+advocat√≠cios[:\s]*R?\$?\s*([\d.,]+)',
                r'honor√°rios[:\s]*R?\$?\s*([\d.,]+)',
                r'advocat√≠cios[:\s]*R?\$?\s*([\d.,]+)'
            ])
            
            return {
                'numero_processo': numero_processo,
                'data_disponibilizacao': data_disponibilizacao,
                'autores': self._extrair_autores(conteudo_completo) or 'N√£o identificado',
                'advogados': self._extrair_advogados(conteudo_completo) or 'N√£o identificado',
                'conteudo_completo': conteudo_completo,
                'valor_principal_bruto': valor_principal_bruto,
                'valor_principal_liquido': valor_principal_liquido,
                'valor_juros_moratorios': valor_juros_moratorios,
                'honorarios_advocaticios': honorarios_advocaticios,
                'url_origem': driver.current_url
            }
            
        except Exception as e:
            print(f"        ‚ùå Erro ao extrair dados da p√°gina individual: {e}")
            return None

    def _extrair_numero_processo(self, texto: str) -> str:
        match = re.search(r'\d{7}-\d{2}\.\d{4}\.\d{1}\.\d{2}\.\d{4}', texto)
        return match.group(0) if match else None

    def _extrair_autores(self, texto: str) -> str:
        patterns = [
            r'(?:Apelante|Requerente|Exequente)s?:?\s*([^,(\n]+)',
            r'Autor[es]*:?\s*([^,(\n]+)'
        ]
        for pattern in patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                return match.group(1).strip()
        return None

    def _extrair_advogados(self, texto: str) -> str:
        matches = re.findall(r'Advogad[oa]:\s*([^(\n]+?)\s*\(OAB:\s*\d+/[A-Z]{2}\)', texto, re.IGNORECASE)
        return ', '.join(set([adv.strip() for adv in matches])) if matches else None

    def _extrair_valor_monetario(self, texto: str, patterns: List[str]) -> float:
        for pattern in patterns:
            match = re.search(pattern, texto, re.IGNORECASE)
            if match:
                valor_str = match.group(1).replace('.', '').replace(',', '.')
                try:
                    return float(valor_str)
                except ValueError:
                    continue
        return None

    def take_screenshot(self, filename: str = None):
        """Tira screenshot da p√°gina atual"""
        driver = self.get_driver()
        if not driver:
            print("‚ùå Driver n√£o inicializado")
            return
        
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"scraping_screenshot_{timestamp}.png"
        
        try:
            driver.save_screenshot(filename)
            print(f"üì∏ Screenshot salva: {filename}")
        except Exception as e:
            print(f"‚ùå Erro ao salvar screenshot: {e}")

    def get_page_info(self):
        """Mostra informa√ß√µes da p√°gina atual"""
        driver = self.get_driver()
        if not driver:
            print("‚ùå Driver n√£o inicializado")
            return
        
        print(f"üåê URL atual: {driver.current_url}")
        print(f"üìÑ T√≠tulo: {driver.title}")
        print(f"üñ•Ô∏è Tamanho da janela: {driver.get_window_size()}")

    def close(self):
        """Fecha o driver e reseta a inst√¢ncia para permitir recria√ß√£o."""
        with self._lock:
            if self.driver:
                try:
                    self.driver.quit()
                    print("‚úÖ Chrome fechado com sucesso")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao fechar driver: {e}")
                finally:
                    self.driver = None
                    self.wait = None
                    
            if self.__class__._instance:
                self.__class__._instance = None
            
            if hasattr(self, 'initialized'):
                del self.initialized

    def _wait_for_page_load(self, timeout=30):
        """Aguarda o carregamento completo da p√°gina"""
        try:
            # Aguardar documento estar pronto
            WebDriverWait(self.driver, timeout).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            
            # Aguardar jQuery terminar (se existir)
            try:
                WebDriverWait(self.driver, 5).until(
                    lambda driver: driver.execute_script("return typeof jQuery === 'undefined' || jQuery.active == 0")
                )
            except:
                pass  # jQuery pode n√£o existir
            
            # Aguardar um pouco mais para elementos din√¢micos
            time.sleep(2)
            print("    ‚úÖ P√°gina carregada completamente")
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è Timeout aguardando carregamento da p√°gina: {e}")

    def _wait_for_element_ready(self, by, value, timeout=30):
        """Aguarda elemento estar vis√≠vel, habilitado e pronto para intera√ß√£o"""
        try:
            # Aguardar elemento estar presente
            element = self.wait.until(EC.presence_of_element_located((by, value)))
            
            # Aguardar estar vis√≠vel
            self.wait.until(EC.visibility_of_element_located((by, value)))
            
            # Aguardar estar clic√°vel
            element = self.wait.until(EC.element_to_be_clickable((by, value)))
            
            # Verifica√ß√£o adicional de estado usando JavaScript
            for attempt in range(10):  # Aumentei para 10 tentativas
                try:
                    # Usar JavaScript para verificar se o elemento est√° realmente pronto
                    is_ready = self.driver.execute_script("""
                        var element = arguments[0];
                        return element && 
                               element.offsetWidth > 0 && 
                               element.offsetHeight > 0 && 
                               !element.disabled && 
                               element.style.display !== 'none' &&
                               element.style.visibility !== 'hidden';
                    """, element)
                    
                    if is_ready:
                        # Scroll para o elemento usando JavaScript
                        self.driver.execute_script("""
                            arguments[0].scrollIntoView({
                                behavior: 'smooth', 
                                block: 'center',
                                inline: 'center'
                            });
                        """, element)
                        time.sleep(1)  # Aguardar scroll completar
                        
                        # Verificar novamente ap√≥s scroll
                        element = self.driver.find_element(by, value)
                        return element
                        
                except Exception as e:
                    print(f"    ‚ö†Ô∏è Tentativa {attempt + 1}: Elemento n√£o pronto: {e}")
                    time.sleep(1)
                    # Re-localizar elemento
                    try:
                        element = self.driver.find_element(by, value)
                    except:
                        element = self.wait.until(EC.presence_of_element_located((by, value)))
            
            print(f"    ‚úÖ Elemento {value} pronto para intera√ß√£o")
            return element
            
        except Exception as e:
            print(f"    ‚ùå Erro ao aguardar elemento {value}: {e}")
            raise

    def _safe_send_keys(self, element, text, clear_first=True):
        """Envia texto de forma segura com JavaScript como fallback"""
        try:
            # Primeira tentativa: Selenium normal
            if clear_first:
                try:
                    element.clear()
                    time.sleep(0.5)
                except:
                    # Fallback: limpar via JavaScript
                    self.driver.execute_script("arguments[0].value = '';", element)
                    time.sleep(0.5)
            
            # Verificar se o elemento ainda est√° ativo
            is_interactive = self.driver.execute_script("""
                var element = arguments[0];
                return element && !element.disabled && element.style.display !== 'none';
            """, element)
            
            if not is_interactive:
                raise Exception("Elemento n√£o est√° mais dispon√≠vel")
            
            # Tentar enviar texto via Selenium
            try:
                element.send_keys(text)
                time.sleep(0.5)
            except:
                # Fallback: usar JavaScript
                print(f"    ‚ö†Ô∏è Selenium falhou, usando JavaScript para inserir texto")
                self.driver.execute_script("arguments[0].value = arguments[1];", element, text)
                # Disparar eventos de mudan√ßa
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', {bubbles: true}));
                    element.dispatchEvent(new Event('change', {bubbles: true}));
                """, element)
                time.sleep(0.5)
            
            # Verificar se o texto foi inserido
            current_value = element.get_attribute('value')
            if current_value != text:
                print(f"    ‚ö†Ô∏è Valor esperado: {text}, valor atual: {current_value}")
                # Tentar novamente via JavaScript
                self.driver.execute_script("arguments[0].value = arguments[1];", element, text)
                self.driver.execute_script("""
                    var element = arguments[0];
                    element.dispatchEvent(new Event('input', {bubbles: true}));
                    element.dispatchEvent(new Event('change', {bubbles: true}));
                """, element)
                
            print(f"    ‚úÖ Texto inserido: {text}")
            return True
            
        except Exception as e:
            print(f"    ‚ùå Erro ao inserir texto: {e}")
            raise

    def _safe_click(self, element):
        """Clica de forma segura com m√∫ltiplos fallbacks"""
        try:
            # Verificar se elemento est√° dispon√≠vel via JavaScript
            is_clickable = self.driver.execute_script("""
                var element = arguments[0];
                return element && 
                       !element.disabled && 
                       element.style.display !== 'none' &&
                       element.style.visibility !== 'hidden';
            """, element)
            
            if not is_clickable:
                raise Exception("Elemento n√£o est√° dispon√≠vel para click")
            
            # Primeira tentativa: click normal do Selenium
            try:
                element.click()
                print(f"    ‚úÖ Click normal realizado")
                return True
            except:
                print(f"    ‚ö†Ô∏è Click normal falhou, tentando JavaScript")
                
            # Segunda tentativa: JavaScript click
            try:
                self.driver.execute_script("arguments[0].click();", element)
                print(f"    ‚úÖ Click via JavaScript realizado")
                return True
            except:
                print(f"    ‚ö†Ô∏è JavaScript click falhou, tentando dispatchEvent")
                
            # Terceira tentativa: Simular evento de click
            try:
                self.driver.execute_script("""
                    var element = arguments[0];
                    var event = new MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: true
                    });
                    element.dispatchEvent(event);
                """, element)
                print(f"    ‚úÖ Click via dispatchEvent realizado")
                return True
            except Exception as e3:
                print(f"    ‚ùå Todos os m√©todos de click falharam: {e3}")
                raise
                
        except Exception as e:
            print(f"    ‚ùå Erro geral no click: {e}")
            raise 